package com.claudecodeplus.mcp.tools

import com.claudecodeplus.mcp.services.IdeAnalysisService
import kotlinx.coroutines.runBlocking
import org.slf4j.LoggerFactory

/**
 * 语法验证工具
 * 实现快速语法检查功能
 */
class SyntaxValidationTool(private val ideAnalysisService: IdeAnalysisService) {
    private val logger = LoggerFactory.getLogger(SyntaxValidationTool::class.java)
    
    /**
     * 验证文件语法
     * MCP 工具: validate_syntax
     */
    fun validateSyntax(filePath: String): Map<String, Any> {
        logger.info("执行语法验证工具: filePath=$filePath")
        
        return try {
            val result = runBlocking {
                ideAnalysisService.validateSyntax(filePath)
            }
            
            mapOf(
                "tool" to "validate_syntax",
                "success" to true,
                "result" to mapOf(
                    "filePath" to result.filePath,
                    "isValid" to result.isValid,
                    "message" to result.message,
                    "errorCount" to result.syntaxErrors.size,
                    "syntaxErrors" to result.syntaxErrors.map { error ->
                        mapOf(
                            "message" to error.message,
                            "line" to error.line,
                            "column" to error.column,
                            "errorCode" to error.errorCode
                        )
                    },
                    "validationSummary" to mapOf(
                        "status" to if (result.isValid) "valid" else "invalid",
                        "errorTypes" to result.syntaxErrors.map { it.errorCode }.distinct(),
                        "totalErrors" to result.syntaxErrors.size
                    )
                )
            )
        } catch (e: Exception) {
            logger.error("执行语法验证工具时出现异常", e)
            mapOf(
                "tool" to "validate_syntax",
                "success" to false,
                "error" to mapOf(
                    "message" to "工具执行失败: ${e.message}",
                    "type" to e.javaClass.simpleName
                )
            )
        }
    }
}