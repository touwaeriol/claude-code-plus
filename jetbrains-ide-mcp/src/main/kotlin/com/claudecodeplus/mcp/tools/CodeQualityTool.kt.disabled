package com.claudecodeplus.mcp.tools

import com.claudecodeplus.mcp.services.IdeAnalysisService
import kotlinx.coroutines.runBlocking
import org.slf4j.LoggerFactory

/**
 * 代码质量分析工具
 * 实现代码质量评估功能
 */
class CodeQualityTool(private val ideAnalysisService: IdeAnalysisService) {
    private val logger = LoggerFactory.getLogger(CodeQualityTool::class.java)
    
    /**
     * 分析代码质量
     * MCP 工具: analyze_code_quality
     */
    fun analyzeCodeQuality(
        filePath: String,
        metrics: List<String> = listOf("complexity", "duplicates", "maintainability")
    ): Map<String, Any> {
        logger.info("执行代码质量分析工具: filePath=$filePath, metrics=$metrics")
        
        return try {
            val result = runBlocking {
                ideAnalysisService.analyzeCodeQuality(filePath, metrics)
            }
            
            mapOf(
                "tool" to "analyze_code_quality",
                "success" to result.success,
                "result" to mapOf(
                    "filePath" to result.filePath,
                    "message" to result.message,
                    "metrics" to result.metrics,
                    "summary" to generateQualitySummary(result.metrics)
                )
            )
        } catch (e: Exception) {
            logger.error("执行代码质量分析工具时出现异常", e)
            mapOf(
                "tool" to "analyze_code_quality",
                "success" to false,
                "error" to mapOf(
                    "message" to "工具执行失败: ${e.message}",
                    "type" to e.javaClass.simpleName
                )
            )
        }
    }
    
    /**
     * 生成质量总结
     */
    private fun generateQualitySummary(metrics: Map<String, Any>): Map<String, Any> {
        val summary = mutableMapOf<String, Any>()
        
        // 基于收集到的指标生成总结
        val fileSize = metrics["file_size"] as? Int ?: 0
        val linesOfCode = metrics["lines_of_code"] as? Int ?: 0
        
        // 简单的质量评估
        summary["size_category"] = when {
            linesOfCode < 100 -> "small"
            linesOfCode < 500 -> "medium"
            else -> "large"
        }
        
        summary["complexity_estimate"] = when {
            linesOfCode < 50 -> "low"
            linesOfCode < 200 -> "medium"
            else -> "high"
        }
        
        summary["maintainability_score"] = when {
            linesOfCode < 100 -> "good"
            linesOfCode < 300 -> "fair"
            else -> "needs_attention"
        }
        
        return summary
    }
}