# Claude Code Plus - Jewel 组件使用规范

## UI 组件优先级

### 1. 优先使用 Jewel 组件
- 优先使用 `org.jetbrains.jewel.ui.component.*` 中的组件
- 避免使用原生的 `androidx.compose.material.*` 组件
- 确保与 IntelliJ IDEA 主题系统的一致性

### 2. 核心组件替换规则

#### 文本组件
```kotlin
// ❌ 避免使用
import androidx.compose.material.Text
Text("内容", style = TextStyle(...))

// ✅ 推荐使用
import org.jetbrains.jewel.ui.component.Text
Text("内容", color = JewelTheme.globalColors.text.normal, fontSize = 14.sp)
```

#### 滚动容器
```kotlin
// ❌ 避免使用
LazyColumn { items(list) { ... } }

// ✅ 推荐使用
VerticallyScrollableContainer(rememberScrollState()) {
    Column { list.forEach { ... } }
}
```

#### 按钮组件
```kotlin
// ❌ 避免使用
Button(onClick = {}) { Text("按钮") }

// ✅ 推荐使用
DefaultButton(onClick = {}) { Text("按钮") }
```

#### 输入框组件
```kotlin
// ❌ 避免使用
BasicTextField(value = text, onValueChange = {})

// ✅ 推荐使用
TextField(value = text, onValueChange = {})
```

#### 分隔线组件
```kotlin
// ❌ 避免使用
Divider(color = Color.Gray, thickness = 1.dp)

// ✅ 推荐使用
Divider(orientation = Orientation.Horizontal, modifier = Modifier.height(1.dp))
```

### 3. 主题系统使用规范

#### 颜色使用
```kotlin
// ❌ 避免硬编码颜色
color = Color.White
color = Color(0xFF333333)

// ✅ 使用 Jewel 主题颜色
color = JewelTheme.globalColors.text.normal
color = JewelTheme.globalColors.text.disabled
color = JewelTheme.globalColors.panelBackground
color = JewelTheme.globalColors.borders.focused
```

#### 文本样式
```kotlin
// ❌ 避免复杂的 TextStyle
style = TextStyle(
    fontSize = 14.sp,
    fontWeight = FontWeight.Bold,
    color = Color.White
)

// ✅ 使用简化的参数
fontSize = 14.sp
fontWeight = FontWeight.Bold
color = JewelTheme.globalColors.text.normal
```

### 4. 组件导入规范

#### 必须导入
```kotlin
import org.jetbrains.jewel.foundation.theme.JewelTheme
import org.jetbrains.jewel.ui.component.*
import org.jetbrains.jewel.ui.Orientation
```

#### 避免导入
```kotlin
// 避免导入这些原生组件
import androidx.compose.material.Text
import androidx.compose.material.Button
import androidx.compose.material.Divider
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
```

### 5. 布局组件使用

#### 基础布局
```kotlin
// ✅ 可以继续使用的原生布局组件
Column(modifier = Modifier.fillMaxSize()) { ... }
Row(horizontalArrangement = Arrangement.SpaceBetween) { ... }
Box(contentAlignment = Alignment.Center) { ... }
```

#### 高级布局
```kotlin
// ✅ 使用 Jewel 的高级布局
VerticallyScrollableContainer { ... }
HorizontallyScrollableContainer { ... }
SplitLayout { ... }
```

### 6. 样式最佳实践

#### 组件修饰符
```kotlin
// ✅ 推荐的修饰符使用
modifier = Modifier
    .fillMaxWidth()
    .background(JewelTheme.globalColors.panelBackground, RoundedCornerShape(8.dp))
    .padding(12.dp)
```

#### 间距系统
```kotlin
// ✅ 使用一致的间距
verticalArrangement = Arrangement.spacedBy(8.dp)  // 小间距
verticalArrangement = Arrangement.spacedBy(12.dp) // 中间距
verticalArrangement = Arrangement.spacedBy(16.dp) // 大间距
```

### 7. 性能优化

#### 状态管理
```kotlin
// ✅ 正确的状态管理
var text by remember { mutableStateOf("") }
val scrollState = rememberScrollState()
val listState = rememberLazyListState()
```

#### 重组优化
```kotlin
// ✅ 避免不必要的重组
@Composable
fun MessageItem(
    message: Message,
    modifier: Modifier = Modifier // 稳定参数放在最后
) { ... }
```

### 8. 组件特定规则

#### EnhancedSmartInputArea
```kotlin
// ✅ 正确使用智能输入框
EnhancedSmartInputArea(
    text = inputText,
    onTextChange = onInputChange,
    onSend = onSend,
    onStop = onStop,
    contexts = contexts,
    onContextAdd = onContextAdd,
    onContextRemove = onContextRemove,
    isGenerating = isGenerating,
    enabled = true,
    modifier = Modifier.fillMaxWidth()
)
```

#### MarkdownRenderer
```kotlin
// ✅ 正确使用 Markdown 渲染器
MarkdownRenderer(
    markdown = content,
    modifier = Modifier.fillMaxWidth()
)
```

#### SimpleToolCallDisplay
```kotlin
// ✅ 正确使用工具调用显示
SimpleToolCallDisplay(
    toolCall = toolCall,
    modifier = Modifier.fillMaxWidth()
)
```

### 9. 测试相关

#### 组件测试
```kotlin
// ✅ 测试时使用正确的主题包装
@Test
fun testComponent() {
    composeTestRule.setContent {
        JewelTheme {
            ComponentUnderTest()
        }
    }
}
```

### 10. 文档和注释

#### 组件文档
```kotlin
/**
 * 自定义聊天组件 - 使用 Jewel 组件实现
 * 
 * @param messages 消息列表
 * @param onSend 发送消息回调
 * @param modifier 修饰符（遵循 Jewel 样式规范）
 */
@Composable
fun ChatView(
    messages: List<Message>,
    onSend: () -> Unit,
    modifier: Modifier = Modifier
) { ... }
```

### 11. 错误处理

#### 常见错误避免
```kotlin
// ❌ 错误：混用主题系统
Text(
    "内容",
    color = Color.White, // 硬编码颜色
    style = MaterialTheme.typography.body1 // 错误的主题系统
)

// ✅ 正确：使用 Jewel 主题系统
Text(
    "内容",
    color = JewelTheme.globalColors.text.normal,
    fontSize = 14.sp
)
```

### 12. 版本兼容性

#### 支持的版本
- IntelliJ IDEA 2023.1+
- Jewel UI 最新版本
- Compose Desktop 兼容版本

#### 迁移策略
1. 逐步替换：先替换使用频率高的组件
2. 向后兼容：保持 API 兼容性
3. 测试验证：每次替换后进行完整测试 