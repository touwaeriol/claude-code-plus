package com.claudecodeplus.ui.redesign.components

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.claudecodeplus.ui.models.*
import org.jetbrains.jewel.foundation.theme.JewelTheme
import org.jetbrains.jewel.ui.component.Text

/**
 * Áî®Êà∑Ê∂àÊÅØÈ°π
 */
@Composable
fun UserMessageItem(message: EnhancedMessage) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                Color(0xFF3574F0).copy(alpha = 0.1f),
                RoundedCornerShape(8.dp)
            )
            .padding(12.dp)
    ) {
        // Â§¥ÈÉ®
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text(
                "üë§",
                style = JewelTheme.defaultTextStyle
            )
            Text(
                "‰Ω†",
                style = JewelTheme.defaultTextStyle.copy(
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF3574F0)
                )
            )
            message.model?.let { model ->
                Text(
                    "‚Üí $model",
                    style = JewelTheme.defaultTextStyle.copy(
                        color = Color(0xFF999999),
                        fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                    )
                )
            }
        }
        
        // ÂÜÖÂÆπ
        Text(
            message.content,
            style = JewelTheme.defaultTextStyle.copy(
                color = Color(0xFFBBBBBB)
            ),
            modifier = Modifier.padding(top = 8.dp)
        )
        
        // ‰∏ä‰∏ãÊñáÂºïÁî®
        if (message.contexts.isNotEmpty()) {
            ContextReferences(
                contexts = message.contexts,
                modifier = Modifier.padding(top = 8.dp)
            )
        }
    }
}

/**
 * Âä©ÊâãÊ∂àÊÅØÈ°π
 */
@Composable
fun AssistantMessageItem(message: EnhancedMessage) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                Color(0xFF3C3F41),
                RoundedCornerShape(8.dp)
            )
            .padding(12.dp)
    ) {
        // Â§¥ÈÉ®
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text(
                "ü§ñ",
                style = JewelTheme.defaultTextStyle
            )
            Text(
                "Claude",
                style = JewelTheme.defaultTextStyle.copy(
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF59A869)
                )
            )
            message.model?.let { model ->
                Text(
                    "($model)",
                    style = JewelTheme.defaultTextStyle.copy(
                        color = Color(0xFF999999),
                        fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                    )
                )
            }
            
            // Áä∂ÊÄÅÊåáÁ§∫Âô®
            when (message.status) {
                MessageStatus.STREAMING -> {
                    Text(
                        "‚ñå",
                        style = JewelTheme.defaultTextStyle.copy(
                            color = Color(0xFF59A869)
                        )
                    )
                }
                MessageStatus.FAILED -> {
                    Text(
                        "‚ùå",
                        style = JewelTheme.defaultTextStyle
                    )
                }
                else -> {}
            }
        }
        
        // Â∑•ÂÖ∑Ë∞ÉÁî®
        if (message.toolCalls.isNotEmpty()) {
            ToolCallsDisplay(
                toolCalls = message.toolCalls,
                modifier = Modifier.padding(vertical = 8.dp)
            )
        }
        
        // ÂÜÖÂÆπ
        Text(
            message.content,
            style = JewelTheme.defaultTextStyle.copy(
                color = Color(0xFFBBBBBB)
            ),
            modifier = Modifier.padding(top = 8.dp)
        )
    }
}

/**
 * Á≥ªÁªüÊ∂àÊÅØÈ°π
 */
@Composable
fun SystemMessageItem(message: EnhancedMessage) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                Color(0xFF2B2B2B),
                RoundedCornerShape(8.dp)
            )
            .padding(12.dp)
    ) {
        Text(
            message.content,
            style = JewelTheme.defaultTextStyle.copy(
                color = Color(0xFF999999)
            )
        )
    }
}

/**
 * ÈîôËØØÊ∂àÊÅØÈ°π
 */
@Composable
fun ErrorMessageItem(message: EnhancedMessage) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                Color(0xFFE55765).copy(alpha = 0.1f),
                RoundedCornerShape(8.dp)
            )
            .border(
                1.dp,
                Color(0xFFE55765).copy(alpha = 0.3f),
                RoundedCornerShape(8.dp)
            )
            .padding(12.dp)
    ) {
        Row(
            verticalAlignment = Alignment.Top,
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text(
                "‚ö†Ô∏è",
                style = JewelTheme.defaultTextStyle
            )
            Text(
                message.content,
                style = JewelTheme.defaultTextStyle.copy(
                    color = Color(0xFFE55765)
                )
            )
        }
    }
}

/**
 * ‰∏ä‰∏ãÊñáÂºïÁî®ÊòæÁ§∫
 */
@Composable
private fun ContextReferences(
    contexts: List<ContextReference>,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.spacedBy(4.dp)
    ) {
        contexts.forEach { context ->
            Row(
                modifier = Modifier
                    .background(
                        Color(0xFF3574F0).copy(alpha = 0.05f),
                        RoundedCornerShape(4.dp)
                    )
                    .padding(horizontal = 8.dp, vertical = 4.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                when (context) {
                    is ContextReference.File -> {
                        Text("üìÑ", style = JewelTheme.defaultTextStyle)
                        Text(
                            context.path,
                            style = JewelTheme.defaultTextStyle.copy(
                                color = Color(0xFF3574F0),
                                fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                            )
                        )
                        context.lines?.let {
                            Text(
                                ":${it.first}-${it.last}",
                                style = JewelTheme.defaultTextStyle.copy(
                                    color = Color(0xFF999999),
                                    fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                                )
                            )
                        }
                    }
                    is ContextReference.Symbol -> {
                        Text("üî∑", style = JewelTheme.defaultTextStyle)
                        Text(
                            "${context.name} (${context.type})",
                            style = JewelTheme.defaultTextStyle.copy(
                                color = Color(0xFF3574F0),
                                fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                            )
                        )
                    }
                    is ContextReference.Terminal -> {
                        Text("üíª", style = JewelTheme.defaultTextStyle)
                        Text(
                            "ÁªàÁ´ØËæìÂá∫",
                            style = JewelTheme.defaultTextStyle.copy(
                                color = Color(0xFF3574F0),
                                fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                            )
                        )
                    }
                    is ContextReference.Problems -> {
                        Text("‚ö†Ô∏è", style = JewelTheme.defaultTextStyle)
                        Text(
                            "${context.problems.size} ‰∏™ÈóÆÈ¢ò",
                            style = JewelTheme.defaultTextStyle.copy(
                                color = Color(0xFFE55765),
                                fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                            )
                        )
                    }
                    is ContextReference.Git -> {
                        Text("üîÄ", style = JewelTheme.defaultTextStyle)
                        Text(
                            "Git ${context.type}",
                            style = JewelTheme.defaultTextStyle.copy(
                                color = Color(0xFF3574F0),
                                fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                            )
                        )
                    }
                    is ContextReference.Folder -> {
                        Text("üìÅ", style = JewelTheme.defaultTextStyle)
                        Text(
                            "${context.path} (${context.fileCount} Êñá‰ª∂)",
                            style = JewelTheme.defaultTextStyle.copy(
                                color = Color(0xFF3574F0),
                                fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                            )
                        )
                    }
                }
            }
        }
    }
}

/**
 * Â∑•ÂÖ∑Ë∞ÉÁî®ÊòæÁ§∫
 */
@Composable
private fun ToolCallsDisplay(
    toolCalls: List<ToolCall>,
    modifier: Modifier = Modifier
) {
    var expanded by remember { mutableStateOf(false) }
    
    Column(
        modifier = modifier
            .fillMaxWidth()
            .background(
                Color(0xFF2B2B2B),
                RoundedCornerShape(4.dp)
            )
            .clickable { expanded = !expanded }
            .padding(8.dp)
    ) {
        // Ê†áÈ¢òÊ†è
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween,
            modifier = Modifier.fillMaxWidth()
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    "üîß",
                    style = JewelTheme.defaultTextStyle
                )
                Text(
                    "Â∑•ÂÖ∑Ë∞ÉÁî® (${toolCalls.size})",
                    style = JewelTheme.defaultTextStyle.copy(
                        color = Color(0xFF999999)
                    )
                )
            }
            
            Text(
                if (expanded) "‚ñº" else "‚ñ∂",
                style = JewelTheme.defaultTextStyle.copy(
                    color = Color(0xFF999999)
                )
            )
        }
        
        // Â±ïÂºÄÁöÑËØ¶ÊÉÖ
        if (expanded) {
            Column(
                modifier = Modifier.padding(top = 8.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                toolCalls.forEach { toolCall ->
                    ToolCallItem(toolCall)
                }
            }
        }
    }
}

/**
 * Âçï‰∏™Â∑•ÂÖ∑Ë∞ÉÁî®È°π
 */
@Composable
private fun ToolCallItem(toolCall: ToolCall) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                Color(0xFF3C3F41),
                RoundedCornerShape(4.dp)
            )
            .padding(8.dp),
        verticalAlignment = Alignment.Top,
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        // ÂõæÊ†á
        Text(
            when (toolCall.tool) {
                ToolType.SEARCH_FILES -> "üîç"
                ToolType.READ_FILE -> "üìñ"
                ToolType.EDIT_FILE -> "‚úèÔ∏è"
                ToolType.RUN_COMMAND -> "üíª"
                ToolType.SEARCH_SYMBOLS -> "üî∑"
                ToolType.GET_PROBLEMS -> "‚ö†Ô∏è"
                ToolType.GIT_OPERATION -> "üîÄ"
                ToolType.WEB_SEARCH -> "üåê"
                ToolType.OTHER -> "üîß"
            },
            style = JewelTheme.defaultTextStyle
        )
        
        // ÂÜÖÂÆπ
        Column(
            modifier = Modifier.weight(1f),
            verticalArrangement = Arrangement.spacedBy(4.dp)
        ) {
            Text(
                toolCall.displayName,
                style = JewelTheme.defaultTextStyle.copy(
                    color = Color.White
                )
            )
            
            // Áä∂ÊÄÅ
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                val (statusText, statusColor) = when (toolCall.status) {
                    ToolCallStatus.PENDING -> "Á≠âÂæÖ‰∏≠" to Color(0xFF999999)
                    ToolCallStatus.RUNNING -> "ÊâßË°å‰∏≠" to Color(0xFF3574F0)
                    ToolCallStatus.SUCCESS -> "ÊàêÂäü" to Color(0xFF59A869)
                    ToolCallStatus.FAILED -> "Â§±Ë¥•" to Color(0xFFE55765)
                    ToolCallStatus.CANCELLED -> "Â∑≤ÂèñÊ∂à" to Color(0xFF999999)
                }
                
                Text(
                    statusText,
                    style = JewelTheme.defaultTextStyle.copy(
                        color = statusColor,
                        fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                    )
                )
                
                // ÊâßË°åÊó∂Èó¥
                toolCall.endTime?.let { endTime ->
                    val duration = endTime - toolCall.startTime
                    Text(
                        "(${duration}ms)",
                        style = JewelTheme.defaultTextStyle.copy(
                            color = Color(0xFF999999),
                            fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                        )
                    )
                }
            }
            
            // ÁªìÊûúÊëòË¶Å
            toolCall.result?.let { result ->
                when (result) {
                    is ToolResult.Success -> {
                        Text(
                            result.summary,
                            style = JewelTheme.defaultTextStyle.copy(
                                color = Color(0xFF999999),
                                fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                            )
                        )
                    }
                    is ToolResult.Failure -> {
                        Text(
                            result.error,
                            style = JewelTheme.defaultTextStyle.copy(
                                color = Color(0xFFE55765),
                                fontSize = JewelTheme.defaultTextStyle.fontSize * 0.9f
                            )
                        )
                    }
                    else -> {}
                }
            }
        }
    }
}