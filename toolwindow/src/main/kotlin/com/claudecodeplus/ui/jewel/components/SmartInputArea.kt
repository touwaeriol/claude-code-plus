package com.claudecodeplus.ui.jewel.components

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.input.key.*
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.claudecodeplus.ui.models.ContextReference
import org.jetbrains.jewel.ui.component.*
import org.jetbrains.jewel.foundation.theme.JewelTheme

/**
 * Êô∫ËÉΩËæìÂÖ•Âå∫ÂüüÁªÑ‰ª∂ - ÁÆÄÂåñÁâàÊú¨
 * ÊîØÊåÅÂ§öË°åËæìÂÖ•ÂíåÂü∫Êú¨ÂäüËÉΩ
 */
@Composable
fun SmartInputArea(
    text: String,
    onTextChange: (String) -> Unit,
    onSend: () -> Unit,
    onStop: (() -> Unit)? = null,
    contexts: List<ContextReference> = emptyList(),
    onContextAdd: (ContextReference) -> Unit = {},
    onContextRemove: (ContextReference) -> Unit = {},
    isGenerating: Boolean = false,
    enabled: Boolean = true,
    modifier: Modifier = Modifier
) {
    val focusRequester = remember { FocusRequester() }
    
    Column(
        modifier = modifier
            .fillMaxWidth()
            .background(JewelTheme.globalColors.panelBackground)
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        // ‰∏ä‰∏ãÊñáÊ†áÁ≠æ
        if (contexts.isNotEmpty()) {
            HorizontallyScrollableContainer {
                Row(
                    horizontalArrangement = Arrangement.spacedBy(6.dp),
                    modifier = Modifier.padding(horizontal = 4.dp)
                ) {
                    contexts.forEach { context ->
                        ContextChip(
                            context = context,
                            onRemove = { onContextRemove(context) }
                        )
                    }
                }
            }
        }
        
        // ËæìÂÖ•Âå∫Âüü
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            verticalAlignment = Alignment.Bottom
        ) {
            // ‰∏ªËæìÂÖ•Ê°Ü
            Box(
                modifier = Modifier.weight(1f)
            ) {
                TextArea(
                    value = text,
                    onValueChange = onTextChange,
                    enabled = enabled && !isGenerating,
                    placeholder = "ËæìÂÖ•Ê∂àÊÅØ...",
                    modifier = Modifier
                        .fillMaxWidth()
                        .heightIn(min = 40.dp, max = 120.dp)
                        .focusRequester(focusRequester)
                        .onPreviewKeyEvent { event ->
                            when {
                                // Enter ÂèëÈÄÅÔºåShift+Enter Êç¢Ë°å
                                event.key == Key.Enter && event.type == KeyEventType.KeyDown -> {
                                    if (!event.isShiftPressed && text.isNotBlank()) {
                                        onSend()
                                        true
                                    } else {
                                        false
                                    }
                                }
                                // Esc ÂÅúÊ≠¢ÁîüÊàê
                                event.key == Key.Escape && event.type == KeyEventType.KeyDown && isGenerating -> {
                                    onStop?.invoke()
                                    true
                                }
                                else -> false
                            }
                        }
                )
            }
            
            // Êìç‰ΩúÊåâÈíÆ
            Column(
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                // ÈôÑ‰ª∂ÊåâÈíÆ
                IconButton(
                    onClick = { /* TODO: ÂÆûÁé∞Êñá‰ª∂ÈÄâÊã© */ },
                    enabled = enabled && !isGenerating
                ) {
                    Text("üìé")
                }
                
                // ÂèëÈÄÅ/ÂÅúÊ≠¢ÊåâÈíÆ
                if (isGenerating) {
                    DefaultButton(
                        onClick = { onStop?.invoke() },
                        enabled = true
                    ) {
                        Text("‚èπ")
                    }
                } else {
                    DefaultButton(
                        onClick = onSend,
                        enabled = enabled && text.isNotBlank()
                    ) {
                        Text("üöÄ")
                    }
                }
            }
        }
    }
    
    // Ëá™Âä®ËÅöÁÑ¶
    LaunchedEffect(Unit) {
        focusRequester.requestFocus()
    }
}

/**
 * ‰∏ä‰∏ãÊñáÂºïÁî®Ê†áÁ≠æ
 */
@Composable
private fun ContextChip(
    context: ContextReference,
    onRemove: () -> Unit
) {
    Row(
        modifier = Modifier
            .background(JewelTheme.globalColors.panelBackground, RoundedCornerShape(4.dp))
            .border(1.dp, JewelTheme.globalColors.borders.normal, RoundedCornerShape(4.dp))
            .padding(horizontal = 8.dp, vertical = 4.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.spacedBy(4.dp)
    ) {
        Text(
            text = when (context) {
                is ContextReference.FileReference -> "üìÑ ${context.path.substringAfterLast('/')}"
                is ContextReference.FolderReference -> "üìÅ ${context.path}"
                is ContextReference.SymbolReference -> "üî§ ${context.name}"
                is ContextReference.TerminalReference -> "üíª ÁªàÁ´Ø"
                is ContextReference.ProblemsReference -> "‚ö†Ô∏è ÈóÆÈ¢ò"
                is ContextReference.GitReference -> "üîÄ Git"
                ContextReference.SelectionReference -> "‚úÇÔ∏è ÈÄâ‰∏≠ÂÜÖÂÆπ"
                ContextReference.WorkspaceReference -> "üóÇÔ∏è Â∑•‰ΩúÁ©∫Èó¥"
            },
            fontSize = 12.sp,
            style = JewelTheme.defaultTextStyle
        )
        
        IconButton(
            onClick = onRemove,
            modifier = Modifier.size(16.dp)
        ) {
            Text("√ó", fontSize = 12.sp)
        }
    }
}