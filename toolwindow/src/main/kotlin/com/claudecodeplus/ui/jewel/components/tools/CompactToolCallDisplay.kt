@file:OptIn(ExperimentalFoundationApi::class)

package com.claudecodeplus.ui.jewel.components.tools

import androidx.compose.animation.*
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.hoverable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.interaction.collectIsHoveredAsState
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.selection.SelectionContainer
import androidx.compose.foundation.verticalScroll
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.unit.Dp
import com.claudecodeplus.ui.models.ToolCall
import com.claudecodeplus.ui.models.ToolCallStatus
import com.claudecodeplus.ui.models.ToolResult
import com.claudecodeplus.sdk.ToolType
import com.claudecodeplus.sdk.Tool
import com.claudecodeplus.sdk.ToolParser
import com.claudecodeplus.ui.jewel.components.tools.*
import com.claudecodeplus.ui.jewel.components.tools.output.*
import org.jetbrains.jewel.foundation.theme.JewelTheme
import org.jetbrains.jewel.ui.component.*
import org.jetbrains.jewel.ui.component.styling.TooltipStyle
import org.jetbrains.jewel.ui.theme.tooltipStyle
import androidx.compose.ui.text.font.FontWeight

/**
 * Á¥ßÂáëÁöÑÂ∑•ÂÖ∑Ë∞ÉÁî®ÊòæÁ§∫ÁªÑ‰ª∂
 * ÈªòËÆ§ÂçïË°åÊòæÁ§∫ÔºåÁÇπÂáªÂ±ïÂºÄËØ¶ÊÉÖ
 */
@Composable
fun CompactToolCallDisplay(
    toolCalls: List<ToolCall>,
    modifier: Modifier = Modifier
) {
    println("[CompactToolCallDisplay] Â∑•ÂÖ∑Ë∞ÉÁî®Êï∞ÈáèÔºö${toolCalls.size}")
    toolCalls.forEach { tool ->
        println("  - ${tool.name} (${tool.id}): ${tool.status}, result=${tool.result?.let { it::class.simpleName } ?: "null"}")
    }
    
    Column(
        modifier = modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(0.dp)  // ÁßªÈô§Â∑•ÂÖ∑Ë∞ÉÁî®‰πãÈó¥ÁöÑÈó¥Ë∑ù
    ) {
        toolCalls.forEach { toolCall ->
            CompactToolCallItem(toolCall)
        }
    }
}

/**
 * Âçï‰∏™Â∑•ÂÖ∑Ë∞ÉÁî®ÁöÑÁ¥ßÂáëÊòæÁ§∫
 */
@Composable
private fun CompactToolCallItem(
    toolCall: ToolCall
) {
    println("[CompactToolCallItem] Ê∏≤ÊüìÂ∑•ÂÖ∑Ôºö${toolCall.name}, IDÔºö${toolCall.id}")
    
    var expanded by remember { mutableStateOf(false) }
    val interactionSource = remember { MutableInteractionSource() }
    val isHovered by interactionSource.collectIsHoveredAsState()
    
    // ËÉåÊôØËâ≤Âä®ÁîªÔºàÊõ¥Âπ≥ÊªëÁöÑËøáÊ∏°Ôºâ
    val backgroundColor by animateColorAsState(
        targetValue = when {
            expanded -> JewelTheme.globalColors.panelBackground.copy(alpha = 0.4f)
            isHovered -> JewelTheme.globalColors.panelBackground.copy(alpha = 0.2f)
            else -> JewelTheme.globalColors.panelBackground.copy(alpha = 0.05f)
        },
        animationSpec = tween(200, easing = EaseInOut),
        label = "background_color"
    )
    
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(3.dp))  // ÂáèÂ∞ëÂúÜËßíÂçäÂæÑ
            .background(backgroundColor)
            .hoverable(interactionSource)
    ) {
        // Á¥ßÂáëÁöÑÂçïË°åÊòæÁ§∫
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable { expanded = !expanded }
                .padding(horizontal = 3.dp, vertical = 0.dp),  // ÂÆåÂÖ®ÁßªÈô§ÂûÇÁõ¥ÂÜÖËæπË∑ù
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Â∑¶‰æßÂÜÖÂÆπ
            Row(
                modifier = Modifier.weight(1f),
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Â∑•ÂÖ∑ÂõæÊ†á
                Text(
                    text = getToolIcon(toolCall),
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 12.sp,  // ÂáèÂ∞ëÂõæÊ†áÂ§ßÂ∞è
                        lineHeight = 12.sp  // ÂáèÂ∞ëË°åÈ´ò
                    )
                )
                
                // Â∑•ÂÖ∑ÂêçÁß∞ÂíåÂèÇÊï∞ÔºàÂçïË°åÁ¥ßÂáëÊòæÁ§∫Ôºâ
                Row(
                    modifier = Modifier.weight(1f),
                    horizontalArrangement = Arrangement.spacedBy(4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Â∑•ÂÖ∑Ë∞ÉÁî®Ê†áÈ¢òË°åÔºåÊ†ºÂºèÔºöüîß ToolName: parameter_value
                    val inlineDisplay = getInlineToolDisplay(toolCall)
                    Text(
                        text = inlineDisplay,
                        style = JewelTheme.defaultTextStyle.copy(
                            fontSize = 11.sp,  // Ëøõ‰∏ÄÊ≠•ÂáèÂ∞ëÂ≠ó‰ΩìÂ§ßÂ∞è
                            color = JewelTheme.globalColors.text.normal,
                            fontWeight = androidx.compose.ui.text.font.FontWeight.Medium,
                            lineHeight = 11.sp  // ËÆæÁΩÆË°åÈ´òÁ≠â‰∫éÂ≠ó‰ΩìÂ§ßÂ∞èÔºåÂáèÂ∞ëË°åÈó¥Ë∑ù
                        ),
                        maxLines = 1,
                        overflow = TextOverflow.Ellipsis
                    )
                }
            }
            
            // Âè≥‰æßÁä∂ÊÄÅÊåáÁ§∫Âô®
            Row(
                horizontalArrangement = Arrangement.spacedBy(4.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Áé∞‰ª£ÂåñÁä∂ÊÄÅÊåáÁ§∫Âô®
                ModernStatusIndicator(
                    status = when (toolCall.status) {
                        ToolCallStatus.PENDING -> ToolExecutionStatus.PENDING
                        ToolCallStatus.RUNNING -> ToolExecutionStatus.RUNNING
                        ToolCallStatus.SUCCESS -> ToolExecutionStatus.SUCCESS
                        ToolCallStatus.FAILED -> ToolExecutionStatus.ERROR
                        ToolCallStatus.CANCELLED -> ToolExecutionStatus.ERROR
                    },
                    size = 10.dp  // Ëøõ‰∏ÄÊ≠•ÂáèÂ∞ëÁä∂ÊÄÅÊåáÁ§∫Âô®Â§ßÂ∞è
                )
                
                // Â±ïÂºÄ/ÊäòÂè†ÂõæÊ†áÔºàÁé∞‰ª£ÂåñËÆæËÆ°Ôºâ
                Box(
                    modifier = Modifier
                        .size(12.dp)  // ÂáèÂ∞ëÁÆ≠Â§¥ÂÆπÂô®Â§ßÂ∞è
                        .padding(1.dp),  // ÂáèÂ∞ëÂÜÖËæπË∑ù
                    contentAlignment = Alignment.Center
                ) {
                    AnimatedContent(
                        targetState = expanded,
                        transitionSpec = {
                            scaleIn(animationSpec = tween(200)) + fadeIn() togetherWith
                            scaleOut(animationSpec = tween(200)) + fadeOut()
                        },
                        label = "expand_icon"
                    ) { isExpanded ->
                        Text(
                            text = if (isExpanded) "‚åÑ" else "‚Ä∫",  // ‰ΩøÁî®Êõ¥Áé∞‰ª£ÁöÑÁÆ≠Â§¥
                            style = JewelTheme.defaultTextStyle.copy(
                                fontSize = 10.sp,  // ÂáèÂ∞ëÁÆ≠Â§¥Â≠ó‰ΩìÂ§ßÂ∞è
                                color = JewelTheme.globalColors.text.normal.copy(alpha = 0.6f),
                                lineHeight = 10.sp  // ÂáèÂ∞ëË°åÈ´ò
                            )
                        )
                    }
                }
            }
        }
        
        // Â±ïÂºÄÁöÑËØ¶ÁªÜÂÜÖÂÆπÔºà‰ºòÂåñÂä®ÁîªÊÄßËÉΩÔºâ
        AnimatedVisibility(
            visible = expanded,
            enter = expandVertically(
                animationSpec = spring(
                    dampingRatio = Spring.DampingRatioNoBouncy,
                    stiffness = Spring.StiffnessLow
                )
            ) + fadeIn(
                animationSpec = tween(250, delayMillis = 50)
            ),
            exit = shrinkVertically(
                animationSpec = tween(200)
            ) + fadeOut(
                animationSpec = tween(150)
            )
        ) {
            ToolCallDetails(
                toolCall = toolCall,
                onClose = { expanded = false }
            )
        }
    }
}

/**
 * Â∑•ÂÖ∑Ë∞ÉÁî®ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
 */
@Composable
private fun ToolCallDetails(
    toolCall: ToolCall,
    onClose: () -> Unit = {}
) {
    println("[ToolCallDetails] Â∑•ÂÖ∑Ôºö${toolCall.name}, ÁªìÊûúÔºö${toolCall.result?.let { it::class.simpleName } ?: "null"}")
    
    // Âà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅÊòæÁ§∫ËØ¶ÁªÜÁªìÊûú
    val shouldShowDetails = shouldShowToolDetails(toolCall)
    
    println("[ToolCallDetails] shouldShowDetails for ${toolCall.name} = $shouldShowDetails")
    
    if (!shouldShowDetails) {
        // ÂØπ‰∫é‰∏çÈúÄË¶ÅÊòæÁ§∫ËØ¶ÁªÜÁªìÊûúÁöÑÂ∑•ÂÖ∑Ôºå‰∏çÊ∏≤Êüì‰ªª‰ΩïÂÜÖÂÆπ
        return
    }
    
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(JewelTheme.globalColors.panelBackground.copy(alpha = 0.05f))  // Êõ¥Ê∑°ÁöÑËÉåÊôØ
    ) {
        // ËØ¶ÁªÜÂÜÖÂÆπÂå∫ÂüüÂê´ÂÖ≥Èó≠ÊåâÈíÆ
        Box(
            modifier = Modifier.fillMaxWidth()
        ) {
            // ‰∏ªÂÜÖÂÆπ
            SelectionContainer {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 2.dp, vertical = 0.dp)  // ÊúÄÂ∞èÂåñÂÜÖËæπË∑ù
                        .padding(top = 12.dp) // ÂáèÂ∞ë‰∏∫ÂÖ≥Èó≠ÊåâÈíÆÁïôÁöÑÁ©∫Èó¥
                ) {
                    // Áõ¥Êé•ÊòæÁ§∫ÁªìÊûú
                    toolCall.result?.let { result ->
                        formatToolResult(toolCall)
                    }
                }
            }
            
            // ÂÖ≥Èó≠ÊåâÈíÆ - ÊµÆÂä®Âú®Âè≥‰∏äËßíÔºåÊõ¥Â∞èÊõ¥ËΩªÈáè
            Box(
                modifier = Modifier
                    .align(Alignment.TopEnd)
                    .padding(2.dp)
            ) {
                Text(
                    text = "‚úï",
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 10.sp,  // Êõ¥Â∞èÁöÑÂ≠ó‰Ωì
                        color = JewelTheme.globalColors.text.normal.copy(alpha = 0.5f)  // Êõ¥Ê∑°ÁöÑÈ¢úËâ≤
                    ),
                    modifier = Modifier
                        .clickable { onClose() }
                        .padding(2.dp)  // Êõ¥Â∞èÁöÑÁÇπÂáªÂå∫Âüü
                )
            }
        }
    }
}

/**
 * Âà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅÊòæÁ§∫Â∑•ÂÖ∑ÁöÑËØ¶ÁªÜÁªìÊûú
 * ‰øÆÂ§çÔºöÁ°Æ‰øùÊâÄÊúâÊúâÁªìÊûúÁöÑÂ∑•ÂÖ∑ÈÉΩÂèØ‰ª•Â±ïÂºÄÊòæÁ§∫
 */
private fun shouldShowToolDetails(toolCall: ToolCall): Boolean {
    // Â¶ÇÊûúÂ∑•ÂÖ∑Ë∞ÉÁî®Ê≤°ÊúâÁªìÊûúÔºå‰∏çÈúÄË¶ÅÊòæÁ§∫ËØ¶ÁªÜ‰ø°ÊÅØ
    if (toolCall.result == null) return false
    
    // ÊúâÁªìÊûúÁöÑÂ∑•ÂÖ∑ÈÉΩÂ∫îËØ•ÂèØ‰ª•ÊòæÁ§∫ËØ¶ÁªÜÁªìÊûú
    return when {
        // Â§±Ë¥•ÁöÑÂ∑•ÂÖ∑ - Áî®Êà∑ÂøÖÈ°ªÁúãÂà∞ÈîôËØØ‰ø°ÊÅØ
        toolCall.result is ToolResult.Failure -> true
        
        // ÊàêÂäüÁöÑÂ∑•ÂÖ∑ - Áî®Êà∑ÂèØ‰ª•ÈÄâÊã©Êü•ÁúãËØ¶ÁªÜÁªìÊûú
        toolCall.result is ToolResult.Success -> true
        
        // ÂÖ∂‰ªñÁ±ªÂûãÁöÑÁªìÊûú‰πüÊòæÁ§∫
        else -> true
    }
}

/**
 * Ëé∑ÂèñÂ∑•ÂÖ∑ÂõæÊ†á
 */
private fun getToolIcon(toolCall: ToolCall): String {
    // ‰ºòÂÖà‰ΩøÁî®Êñ∞ÁöÑ Tool ÂØπË±°
    return toolCall.tool?.icon ?: run {
        // ÂõûÈÄÄÂà∞ÊóßÁöÑ ToolType Á≥ªÁªü
        val toolType = ToolType.fromName(toolCall.name)
        ToolType.getIcon(toolType)
    }
}

/**
 * Â∑•ÂÖ∑ÊòæÁ§∫‰ø°ÊÅØ
 */
private data class ToolDisplayInfo(
    val briefValue: String = "",
    val fullPath: String = ""
)

/**
 * Ëé∑ÂèñÂ∑•ÂÖ∑ÁöÑÂÜÖËÅîÊòæÁ§∫Ê†ºÂºèÔºå‰æãÂ¶ÇÔºöLS ./desktop
 */
private fun getInlineToolDisplay(toolCall: ToolCall): String {
    val toolName = toolCall.name
    val primaryParam = getPrimaryParamValue(toolCall)
    
    return when {
        // ÂØπ‰∫éÂçïÂèÇÊï∞Â∑•ÂÖ∑Ôºå‰ΩøÁî®ÂÜíÂè∑Ê†ºÂºèÔºöToolName: parameter
        isSingleParamTool(toolName) && primaryParam != null -> {
            when {
                // Êñá‰ª∂Ë∑ØÂæÑÁ±ªÂ∑•ÂÖ∑ÔºåÂè™ÊòæÁ§∫Êñá‰ª∂Âêç/ÁõÆÂΩïÂêç
                toolName.contains("Read", ignoreCase = true) ||
                toolName.contains("Write", ignoreCase = true) ||
                toolName.contains("LS", ignoreCase = true) -> {
                    val fileName = primaryParam.substringAfterLast('/').substringAfterLast('\\')
                    "$toolName: $fileName"
                }
                // URLÁ±ªÂ∑•ÂÖ∑ÔºåÊòæÁ§∫ÂüüÂêç
                toolName.contains("Web", ignoreCase = true) -> {
                    val domain = primaryParam
                        .removePrefix("https://")
                        .removePrefix("http://")
                        .substringBefore("/")
                    "$toolName: $domain"
                }
                // BashÂëΩ‰ª§ÔºåÊà™ÂèñÂëΩ‰ª§ÁöÑÂâçÈù¢ÈÉ®ÂàÜ
                toolName.contains("Bash", ignoreCase = true) -> {
                    val command = if (primaryParam.length > 25) {
                        primaryParam.take(22) + "..."
                    } else {
                        primaryParam
                    }
                    "$toolName: $command"
                }
                // GlobÂ∑•ÂÖ∑ÊòæÁ§∫ÂåπÈÖçÊ®°Âºè
                toolName.contains("Glob", ignoreCase = true) -> {
                    "$toolName: $primaryParam"
                }
                // Grep/SearchÂ∑•ÂÖ∑ÊòæÁ§∫ÊêúÁ¥¢ÂÜÖÂÆπ
                toolName.contains("Grep", ignoreCase = true) ||
                toolName.contains("Search", ignoreCase = true) -> {
                    val searchTerm = if (primaryParam.length > 20) {
                        primaryParam.take(17) + "..."
                    } else {
                        primaryParam
                    }
                    "$toolName: $searchTerm"
                }
                else -> "$toolName: $primaryParam"
            }
        }
        // ÂØπ‰∫éÂ§öÂèÇÊï∞Â∑•ÂÖ∑ÔºåÊòæÁ§∫Â∑•ÂÖ∑ÂêçÂíå‰∏ªË¶ÅÂèÇÊï∞
        else -> {
            if (primaryParam != null) {
                val displayParam = if (primaryParam.length > 25) {
                    primaryParam.take(22) + "..."
                } else {
                    primaryParam
                }
                "$toolName: $displayParam"
            } else {
                toolName
            }
        }
    }
}

/**
 * Ëé∑ÂèñÂèÇÊï∞ÊëòË¶ÅÔºàÁî®‰∫éÂ§öÂèÇÊï∞Â∑•ÂÖ∑ÁöÑÁ¨¨‰∫åË°åÊòæÁ§∫Ôºâ
 */
private fun getParameterSummary(toolCall: ToolCall): String {
    if (toolCall.parameters.size <= 1) return ""
    
    return when {
        // EditÂ∑•ÂÖ∑ÊòæÁ§∫ÁºñËæëÊï∞Èáè
        toolCall.name.contains("Edit", ignoreCase = true) -> {
            val editsCount = toolCall.parameters["edits"]?.let {
                if (it is List<*>) it.size else 1
            } ?: 1
            "$editsCount Â§Ñ‰øÆÊîπ"
        }
        // Search/GrepÂ∑•ÂÖ∑ÊòæÁ§∫ÊêúÁ¥¢ËåÉÂõ¥
        toolCall.name.contains("Search", ignoreCase = true) ||
        toolCall.name.contains("Grep", ignoreCase = true) -> {
            val glob = toolCall.parameters["glob"]?.toString()
            val type = toolCall.parameters["type"]?.toString()
            when {
                glob != null -> "in $glob"
                type != null -> ".$type files"
                else -> "${toolCall.parameters.size - 1} ‰∏™ÂèÇÊï∞"
            }
        }
        // GlobÂ∑•ÂÖ∑ÊòæÁ§∫ÂåπÈÖçÊ®°Âºè
        toolCall.name.contains("Glob", ignoreCase = true) -> {
            val pattern = toolCall.parameters["pattern"]?.toString()
            if (pattern != null) "pattern: $pattern" else "${toolCall.parameters.size} ‰∏™ÂèÇÊï∞"
        }
        // TaskÂ∑•ÂÖ∑ÊòæÁ§∫‰ªªÂä°Á±ªÂûã
        toolCall.name.contains("Task", ignoreCase = true) -> {
            val subagentType = toolCall.parameters["subagent_type"]?.toString()
            if (subagentType != null) "agent: $subagentType" else "${toolCall.parameters.size} ‰∏™ÂèÇÊï∞"
        }
        // WebFetchÂ∑•ÂÖ∑ÊòæÁ§∫ÊèêÁ§∫‰ø°ÊÅØ
        toolCall.name.contains("WebFetch", ignoreCase = true) -> {
            val prompt = toolCall.parameters["prompt"]?.toString()
            if (prompt != null && prompt.length > 20) {
                "query: ${prompt.take(17)}..."
            } else {
                prompt?.let { "query: $it" } ?: "${toolCall.parameters.size} ‰∏™ÂèÇÊï∞"
            }
        }
        // NotebookEditÂ∑•ÂÖ∑ÊòæÁ§∫Êìç‰ΩúÁ±ªÂûã
        toolCall.name.contains("NotebookEdit", ignoreCase = true) -> {
            val editMode = toolCall.parameters["edit_mode"]?.toString()
            val cellType = toolCall.parameters["cell_type"]?.toString()
            when {
                editMode != null && cellType != null -> "$editMode $cellType cell"
                editMode != null -> "$editMode cell"
                else -> "${toolCall.parameters.size} ‰∏™ÂèÇÊï∞"
            }
        }
        // MCPÂ∑•ÂÖ∑ÊòæÁ§∫ÊúçÂä°Âô®ÂêçÁß∞
        toolCall.name.startsWith("mcp__", ignoreCase = true) -> {
            val serverName = toolCall.name.substringAfter("mcp__").substringBefore("__")
            "via $serverName"
        }
        // ÂÖ∂‰ªñÂ∑•ÂÖ∑ÊòæÁ§∫ÂèÇÊï∞Êï∞Èáè
        else -> "${toolCall.parameters.size} ‰∏™ÂèÇÊï∞"
    }
}

/**
 * Ëé∑ÂèñÂ∑•ÂÖ∑ÁöÑÊòæÁ§∫‰ø°ÊÅØ
 */
private fun getToolDisplayInfo(toolCall: ToolCall): ToolDisplayInfo {
    // ÂØπ‰∫éÂçïÂèÇÊï∞Â∑•ÂÖ∑
    if (isSingleParamTool(toolCall.name)) {
        val paramValue = getPrimaryParamValue(toolCall)
        if (paramValue != null) {
            return when {
                // Êñá‰ª∂Ë∑ØÂæÑÁ±ªÂ∑•ÂÖ∑
                toolCall.name.contains("Read", ignoreCase = true) ||
                toolCall.name.contains("Write", ignoreCase = true) ||
                toolCall.name.contains("LS", ignoreCase = true) -> {
                    val fileName = paramValue.substringAfterLast('/').substringAfterLast('\\')
                    ToolDisplayInfo(
                        briefValue = fileName,
                        fullPath = paramValue
                    )
                }
                // URLÁ±ªÂ∑•ÂÖ∑
                toolCall.name.contains("Web", ignoreCase = true) -> {
                    val domain = paramValue
                        .removePrefix("https://")
                        .removePrefix("http://")
                        .substringBefore("/")
                    ToolDisplayInfo(
                        briefValue = domain,
                        fullPath = paramValue
                    )
                }
                // ÂÖ∂‰ªñÂçïÂèÇÊï∞Â∑•ÂÖ∑
                else -> ToolDisplayInfo(
                    briefValue = if (paramValue.length > 40) {
                        paramValue.take(37) + "..."
                    } else {
                        paramValue
                    }
                )
            }
        }
    }
    
    // ÂØπ‰∫éÂ§öÂèÇÊï∞Â∑•ÂÖ∑Ôºå‰ΩøÁî®ÊëòË¶ÅÊ†ºÂºè
    val briefInfo = formatToolBriefInfo(toolCall)
    return ToolDisplayInfo(briefValue = briefInfo)
}

/**
 * Ê†ºÂºèÂåñÂèÇÊï∞ÊòæÁ§∫
 */
private fun formatParameters(parameters: Map<String, Any>): String {
    return parameters.entries.joinToString("\n") { (key, value) ->
        "$key: ${formatValue(value)}"
    }
}

private fun formatValue(value: Any): String {
    return when (value) {
        is String -> if (value.length > 80) "\"${value.take(80)}...\"" else "\"$value\""
        is List<*> -> "[${value.size} items]"
        is Map<*, *> -> "{${value.size} entries}"
        else -> value.toString()
    }
}

/**
 * Glob Êñá‰ª∂ÂåπÈÖçÁªìÊûúÊòæÁ§∫
 */
@Composable
private fun FileMatchResultDisplay(toolCall: ToolCall) {
    val result = toolCall.result ?: return
    
    when (result) {
        is ToolResult.Success -> {
            val output = result.output
            val lines = output.split('\n').filter { it.isNotBlank() }
            
            if (lines.isEmpty()) {
                Text(
                    text = "üìÇ Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÊñá‰ª∂",
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 12.sp,
                        color = JewelTheme.globalColors.text.normal.copy(alpha = 0.6f)
                    )
                )
            } else {
                Column(
                    verticalArrangement = Arrangement.spacedBy(2.dp)
                ) {
                    Text(
                        text = "üìÇ ÊâæÂà∞ ${lines.size} ‰∏™ÂåπÈÖçÊñá‰ª∂Ôºö",
                        style = JewelTheme.defaultTextStyle.copy(
                            fontSize = 12.sp,
                            fontWeight = FontWeight.Medium
                        )
                    )
                    
                    Column(
                        modifier = Modifier
                            .heightIn(max = 120.dp)  // ÂáèÂ∞ëÊúÄÂ§ßÈ´òÂ∫¶
                            .verticalScroll(rememberScrollState()),
                        verticalArrangement = Arrangement.spacedBy(1.dp)
                    ) {
                        lines.take(20).forEach { filePath ->
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.spacedBy(8.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(
                                    text = "üìÑ",
                                    style = JewelTheme.defaultTextStyle.copy(fontSize = 10.sp)
                                )
                                Text(
                                    text = filePath.substringAfterLast('/').ifEmpty { filePath },
                                    style = JewelTheme.defaultTextStyle.copy(
                                        fontSize = 11.sp,
                                        fontFamily = FontFamily.Monospace,
                                        color = JewelTheme.globalColors.text.normal
                                    ),
                                    modifier = Modifier.weight(1f)
                                )
                            }
                        }
                        
                        if (lines.size > 20) {
                            Text(
                                text = "... ËøòÊúâ ${lines.size - 20} ‰∏™Êñá‰ª∂",
                                style = JewelTheme.defaultTextStyle.copy(
                                    fontSize = 10.sp,
                                    color = JewelTheme.globalColors.text.normal.copy(alpha = 0.6f)
                                )
                            )
                        }
                    }
                }
            }
        }
        is ToolResult.Failure -> {
            Text(
                text = "‚ùå ${result.error}",
                style = JewelTheme.defaultTextStyle.copy(
                    fontSize = 12.sp,
                    color = Color(0xFFFF6B6B)
                )
            )
        }
        else -> {}
    }
}

/**
 * ÊêúÁ¥¢ÁªìÊûúÊòæÁ§∫ÔºàGrep/SearchÔºâ
 */
@Composable
private fun SearchResultDisplay(toolCall: ToolCall) {
    val result = toolCall.result ?: return
    
    when (result) {
        is ToolResult.Success -> {
            val output = result.output
            val lines = output.split('\n').filter { it.isNotBlank() }
            
            if (lines.isEmpty()) {
                Text(
                    text = "üîç Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÂÜÖÂÆπ",
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 12.sp,
                        color = JewelTheme.globalColors.text.normal.copy(alpha = 0.6f)
                    )
                )
            } else {
                Column(
                    verticalArrangement = Arrangement.spacedBy(2.dp)
                ) {
                    // ÊêúÁ¥¢ÁªüËÆ°
                    val pattern = toolCall.parameters["pattern"]?.toString() ?: ""
                    Text(
                        text = "üîç ÊêúÁ¥¢ \"$pattern\" ÊâæÂà∞ ${lines.size} Â§ÑÂåπÈÖçÔºö",
                        style = JewelTheme.defaultTextStyle.copy(
                            fontSize = 12.sp,
                            fontWeight = FontWeight.Medium
                        )
                    )
                    
                    // ÊêúÁ¥¢ÁªìÊûúÂàóË°®
                    Column(
                        modifier = Modifier
                            .heightIn(max = 140.dp)  // ÂáèÂ∞ëÊúÄÂ§ßÈ´òÂ∫¶
                            .verticalScroll(rememberScrollState()),
                        verticalArrangement = Arrangement.spacedBy(1.dp)
                    ) {
                        lines.take(15).forEach { line ->
                            val parts = line.split(':', limit = 3)
                            if (parts.size >= 2) {
                                Row(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(vertical = 1.dp),
                                    horizontalArrangement = Arrangement.spacedBy(4.dp),
                                    verticalAlignment = Alignment.Top
                                ) {
                                    // Êñá‰ª∂Âêç
                                    Text(
                                        text = parts[0].substringAfterLast('/'),
                                        style = JewelTheme.defaultTextStyle.copy(
                                            fontSize = 10.sp,
                                            color = JewelTheme.globalColors.text.normal.copy(alpha = 0.7f),
                                            fontWeight = FontWeight.Medium
                                        ),
                                        modifier = Modifier.width(120.dp)
                                    )
                                    
                                    // Ë°åÂè∑
                                    if (parts.size >= 3) {
                                        Text(
                                            text = parts[1],
                                            style = JewelTheme.defaultTextStyle.copy(
                                                fontSize = 10.sp,
                                                color = JewelTheme.globalColors.text.normal.copy(alpha = 0.5f)
                                            ),
                                            modifier = Modifier.width(40.dp)
                                        )
                                        
                                        // ÂåπÈÖçÂÜÖÂÆπ
                                        Text(
                                            text = parts[2].trim(),
                                            style = JewelTheme.defaultTextStyle.copy(
                                                fontSize = 10.sp,
                                                fontFamily = FontFamily.Monospace,
                                                color = JewelTheme.globalColors.text.normal
                                            ),
                                            modifier = Modifier.weight(1f),
                                            maxLines = 1,
                                            overflow = TextOverflow.Ellipsis
                                        )
                                    } else {
                                        Text(
                                            text = parts[1],
                                            style = JewelTheme.defaultTextStyle.copy(
                                                fontSize = 10.sp,
                                                fontFamily = FontFamily.Monospace,
                                                color = JewelTheme.globalColors.text.normal
                                            ),
                                            modifier = Modifier.weight(1f),
                                            maxLines = 1,
                                            overflow = TextOverflow.Ellipsis
                                        )
                                    }
                                }
                            }
                        }
                        
                        if (lines.size > 15) {
                            Text(
                                text = "... ËøòÊúâ ${lines.size - 15} Â§ÑÂåπÈÖç",
                                style = JewelTheme.defaultTextStyle.copy(
                                    fontSize = 10.sp,
                                    color = JewelTheme.globalColors.text.normal.copy(alpha = 0.6f)
                                )
                            )
                        }
                    }
                }
            }
        }
        is ToolResult.Failure -> {
            Text(
                text = "‚ùå ${result.error}",
                style = JewelTheme.defaultTextStyle.copy(
                    fontSize = 12.sp,
                    color = Color(0xFFFF6B6B)
                )
            )
        }
        else -> {}
    }
}

/**
 * ÁΩëÈ°µÂÜÖÂÆπÊòæÁ§∫ÔºàWebFetchÔºâ
 */
@Composable
private fun WebContentDisplay(toolCall: ToolCall) {
    val result = toolCall.result ?: return
    
    when (result) {
        is ToolResult.Success -> {
            val url = toolCall.parameters["url"]?.toString() ?: ""
            val content = result.output
            
            Column(
                verticalArrangement = Arrangement.spacedBy(3.dp)
            ) {
                // URL Ê†áÈ¢ò
                Row(
                    horizontalArrangement = Arrangement.spacedBy(4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "üåê",
                        style = JewelTheme.defaultTextStyle.copy(fontSize = 12.sp)
                    )
                    Text(
                        text = url.removePrefix("https://").removePrefix("http://").substringBefore("/"),
                        style = JewelTheme.defaultTextStyle.copy(
                            fontSize = 12.sp,
                            fontWeight = FontWeight.Medium
                        )
                    )
                }
                
                // ÂÜÖÂÆπÊëòË¶Å
                Text(
                    text = if (content.length > 400) content.take(397) + "..." else content,  // ÂáèÂ∞ëÂ≠óÁ¨¶Êï∞
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 11.sp,
                        color = JewelTheme.globalColors.text.normal.copy(alpha = 0.8f),
                        lineHeight = 15.sp  // ÂáèÂ∞ëË°åÈ´ò
                    ),
                    modifier = Modifier
                        .heightIn(max = 100.dp)  // ÂáèÂ∞ëÊúÄÂ§ßÈ´òÂ∫¶
                        .verticalScroll(rememberScrollState())
                )
                
                // ÂÜÖÂÆπÁªüËÆ°
                Text(
                    text = "ÂÜÖÂÆπÈïøÂ∫¶Ôºö${content.length} Â≠óÁ¨¶",
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 10.sp,
                        color = JewelTheme.globalColors.text.normal.copy(alpha = 0.5f)
                    )
                )
            }
        }
        is ToolResult.Failure -> {
            Text(
                text = "‚ùå ${result.error}",
                style = JewelTheme.defaultTextStyle.copy(
                    fontSize = 12.sp,
                    color = Color(0xFFFF6B6B)
                )
            )
        }
        else -> {}
    }
}

/**
 * Â≠ê‰ªªÂä°Â§ÑÁêÜÊòæÁ§∫ÔºàTaskÔºâ
 */
@Composable
private fun SubTaskDisplay(toolCall: ToolCall) {
    val result = toolCall.result ?: return
    
    when (result) {
        is ToolResult.Success -> {
            val output = result.output
            val description = toolCall.parameters["description"]?.toString() ?: "ÊâßË°å‰ªªÂä°"
            
            Column(
                verticalArrangement = Arrangement.spacedBy(2.dp)
            ) {
                Text(
                    text = "üîß $description",
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Medium
                    )
                )
                
                Text(
                    text = if (output.length > 250) output.take(247) + "..." else output,
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 11.sp,
                        fontFamily = FontFamily.Monospace,
                        color = JewelTheme.globalColors.text.normal.copy(alpha = 0.8f)
                    ),
                    modifier = Modifier
                        .heightIn(max = 100.dp)
                        .verticalScroll(rememberScrollState())
                )
            }
        }
        is ToolResult.Failure -> {
            Text(
                text = "‚ùå ‰ªªÂä°ÊâßË°åÂ§±Ë¥•Ôºö${result.error}",
                style = JewelTheme.defaultTextStyle.copy(
                    fontSize = 12.sp,
                    color = Color(0xFFFF6B6B)
                )
            )
        }
        else -> {}
    }
}

/**
 * Jupyter Êìç‰ΩúÊòæÁ§∫ÔºàNotebookEditÔºâ
 */
@Composable
private fun NotebookOperationDisplay(toolCall: ToolCall) {
    val result = toolCall.result ?: return
    
    when (result) {
        is ToolResult.Success -> {
            val notebookPath = toolCall.parameters["notebook_path"]?.toString() ?: ""
            val cellNumber = toolCall.parameters["cell_number"]?.toString()
            val editMode = toolCall.parameters["edit_mode"]?.toString() ?: "replace"
            
            Column(
                verticalArrangement = Arrangement.spacedBy(2.dp)
            ) {
                // Êìç‰ΩúÊ†áÈ¢ò
                Row(
                    horizontalArrangement = Arrangement.spacedBy(4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "üìì",
                        style = JewelTheme.defaultTextStyle.copy(fontSize = 12.sp)
                    )
                    Text(
                        text = "${editMode.uppercase()} ${notebookPath.substringAfterLast('/')}",
                        style = JewelTheme.defaultTextStyle.copy(
                            fontSize = 12.sp,
                            fontWeight = FontWeight.Medium
                        )
                    )
                }
                
                // ÂçïÂÖÉÊ†º‰ø°ÊÅØ
                if (cellNumber != null) {
                    Text(
                        text = "Cell: $cellNumber",
                        style = JewelTheme.defaultTextStyle.copy(
                            fontSize = 11.sp,
                            color = JewelTheme.globalColors.text.normal.copy(alpha = 0.7f)
                        )
                    )
                }
                
                // Êìç‰ΩúÁªìÊûú
                val output = result.output
                if (output.isNotEmpty()) {
                    Text(
                        text = if (output.length > 200) output.take(197) + "..." else output,
                        style = JewelTheme.defaultTextStyle.copy(
                            fontSize = 11.sp,
                            fontFamily = FontFamily.Monospace,
                            color = JewelTheme.globalColors.text.normal.copy(alpha = 0.8f)
                        ),
                        modifier = Modifier
                            .heightIn(max = 80.dp)
                            .verticalScroll(rememberScrollState())
                    )
                } else {
                    Text(
                        text = "‚úÖ Êìç‰ΩúÂÆåÊàê",
                        style = JewelTheme.defaultTextStyle.copy(
                            fontSize = 11.sp,
                            color = Color(0xFF4CAF50)
                        )
                    )
                }
            }
        }
        is ToolResult.Failure -> {
            Text(
                text = "‚ùå Notebook Êìç‰ΩúÂ§±Ë¥•Ôºö${result.error}",
                style = JewelTheme.defaultTextStyle.copy(
                    fontSize = 12.sp,
                    color = Color(0xFFFF6B6B)
                )
            )
        }
        else -> {}
    }
}

/**
 * MCP Â∑•ÂÖ∑Áªü‰∏ÄÊòæÁ§∫
 */
@Composable
private fun MCPToolDisplay(toolCall: ToolCall) {
    val result = toolCall.result ?: return
    
    when (result) {
        is ToolResult.Success -> {
            val toolName = toolCall.name
            val serverName = toolName.substringAfter("mcp__").substringBefore("__")
            val functionName = toolName.substringAfterLast("__")
            
            Column(
                verticalArrangement = Arrangement.spacedBy(2.dp)
            ) {
                // MCP Â∑•ÂÖ∑Ê†áÈ¢ò
                Row(
                    horizontalArrangement = Arrangement.spacedBy(4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "üîó",
                        style = JewelTheme.defaultTextStyle.copy(fontSize = 12.sp)
                    )
                    Text(
                        text = "$serverName.$functionName",
                        style = JewelTheme.defaultTextStyle.copy(
                            fontSize = 12.sp,
                            fontWeight = FontWeight.Medium
                        )
                    )
                }
                
                // ‰∏ªË¶ÅÂèÇÊï∞
                val mainParams = toolCall.parameters.entries.take(2)
                if (mainParams.isNotEmpty()) {
                    Column(
                        verticalArrangement = Arrangement.spacedBy(1.dp)
                    ) {
                        mainParams.forEach { (key, value) ->
                            Text(
                                text = "$key: ${formatValue(value)}",
                                style = JewelTheme.defaultTextStyle.copy(
                                    fontSize = 10.sp,
                                    color = JewelTheme.globalColors.text.normal.copy(alpha = 0.7f)
                                )
                            )
                        }
                    }
                }
                
                // ÁªìÊûúÊëòË¶Å
                val output = result.output
                Text(
                    text = if (output.length > 200) output.take(197) + "..." else output,
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 11.sp,
                        fontFamily = FontFamily.Monospace,
                        color = JewelTheme.globalColors.text.normal.copy(alpha = 0.8f)
                    ),
                    modifier = Modifier
                        .heightIn(max = 100.dp)
                        .verticalScroll(rememberScrollState())
                )
            }
        }
        is ToolResult.Failure -> {
            Text(
                text = "‚ùå MCP Â∑•ÂÖ∑ÊâßË°åÂ§±Ë¥•Ôºö${result.error}",
                style = JewelTheme.defaultTextStyle.copy(
                    fontSize = 12.sp,
                    color = Color(0xFFFF6B6B)
                )
            )
        }
        else -> {}
    }
}

/**
 * Ê†ºÂºèÂåñÊó∂Èó¥ÈïøÂ∫¶
 */
private fun formatDuration(millis: Long): String {
    return when {
        millis < 1000 -> "${millis}ms"
        millis < 60000 -> "${millis / 1000}.${(millis % 1000) / 100}s"
        else -> "${millis / 60000}m ${(millis % 60000) / 1000}s"
    }
}

/**
 * Ê†ºÂºèÂåñÂ≠óËäÇÊï∞
 */
private fun formatBytes(bytes: Long): String {
    return when {
        bytes < 1024 -> "$bytes B"
        bytes < 1024 * 1024 -> "${bytes / 1024} KB"
        else -> "${bytes / (1024 * 1024)} MB"
    }
}

/**
 * Ê†πÊçÆÂ∑•ÂÖ∑Á±ªÂûãÊ†ºÂºèÂåñÁªìÊûúÂ±ïÁ§∫
 */
@Composable
private fun formatToolResult(toolCall: ToolCall) {
    println("[formatToolResult] Ê†ºÂºèÂåñÂ∑•ÂÖ∑ÁªìÊûúÔºö${toolCall.name}, ÊúâÁªìÊûúÔºö${toolCall.result != null}")
    
    when {
        // Edit/MultiEdit ‰ΩøÁî® Diff Â±ïÁ§∫
        toolCall.name.contains("Edit", ignoreCase = true) -> {
            println("[formatToolResult] ‰ΩøÁî® DiffResultDisplay")
            DiffResultDisplay(toolCall)
        }
        
        // Read/Write ‰ΩøÁî®ÂÜÖÂÆπÈ¢ÑËßà
        toolCall.name.contains("Read", ignoreCase = true) ||
        toolCall.name.contains("Write", ignoreCase = true) -> {
            println("[formatToolResult] ‰ΩøÁî® FileContentPreview")
            FileContentPreview(toolCall)
        }
        
        // LS ‰ΩøÁî®Êñá‰ª∂ÂàóË°®Â±ïÁ§∫
        toolCall.name.contains("LS", ignoreCase = true) -> {
            println("[formatToolResult] ‰ΩøÁî® FileListDisplay")
            FileListDisplay(toolCall)
        }
        
        // Bash ÂëΩ‰ª§‰ΩøÁî®ÂëΩ‰ª§ÁªìÊûúÂ±ïÁ§∫
        toolCall.name.contains("Bash", ignoreCase = true) -> {
            CommandResultDisplay(toolCall)
        }
        
        // TodoWrite ‰ΩøÁî®ÁúãÊùøÂ±ïÁ§∫
        toolCall.name.contains("TodoWrite", ignoreCase = true) -> {
            EnhancedTodoDisplay(toolCall)
        }
        
        // Glob Êñá‰ª∂ÂåπÈÖçÁªìÊûúÂ±ïÁ§∫
        toolCall.name.contains("Glob", ignoreCase = true) -> {
            FileMatchResultDisplay(toolCall)
        }
        
        // Grep/Search ÊêúÁ¥¢ÁªìÊûúÂ±ïÁ§∫
        toolCall.name.contains("Grep", ignoreCase = true) ||
        toolCall.name.contains("Search", ignoreCase = true) -> {
            SearchResultDisplay(toolCall)
        }
        
        // WebFetch ÁΩëÈ°µÂÜÖÂÆπÂ±ïÁ§∫
        toolCall.name.contains("WebFetch", ignoreCase = true) -> {
            WebContentDisplay(toolCall)
        }
        
        // Task Â≠ê‰ªªÂä°Â§ÑÁêÜÂ±ïÁ§∫
        toolCall.name.contains("Task", ignoreCase = true) -> {
            SubTaskDisplay(toolCall)
        }
        
        // NotebookEdit Jupyter Êìç‰ΩúÂ±ïÁ§∫
        toolCall.name.contains("NotebookEdit", ignoreCase = true) -> {
            NotebookOperationDisplay(toolCall)
        }
        
        // MCP Â∑•ÂÖ∑Áªü‰∏ÄÂ±ïÁ§∫Ôºà‰ª• mcp__ ÂºÄÂ§¥Ôºâ
        toolCall.name.startsWith("mcp__", ignoreCase = true) -> {
            MCPToolDisplay(toolCall)
        }
        
        // ÂÖ∂‰ªñÂ∑•ÂÖ∑‰ΩøÁî®ÈªòËÆ§Â±ïÁ§∫
        else -> {
            DefaultResultDisplay(toolCall)
        }
    }
}

/**
 * ÈÄöÁî®ÁöÑÂ∑•ÂÖ∑ÁªìÊûúÊòæÁ§∫ÁªÑ‰ª∂
 * @param toolCall Â∑•ÂÖ∑Ë∞ÉÁî®‰ø°ÊÅØ
 * @param limitHeight ÊòØÂê¶ÈôêÂà∂È´òÂ∫¶
 * @param maxHeight ÊúÄÂ§ßÈ´òÂ∫¶Ôºà‰ªÖÂú® limitHeight = true Êó∂ÁîüÊïàÔºâ
 */
@Composable
private fun ToolResultContent(
    toolCall: ToolCall,
    limitHeight: Boolean = false,
    maxHeight: Dp = 200.dp
) {
    val result = toolCall.result ?: return
    
    if (result is ToolResult.Success) {
        val modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(4.dp))
            .background(JewelTheme.globalColors.panelBackground.copy(alpha = 0.3f))
            .padding(4.dp)
            .then(
                if (limitHeight) {
                    Modifier.heightIn(max = maxHeight)
                } else {
                    Modifier
                }
            )
        
        Box(modifier = modifier) {
            val scrollState = if (limitHeight) rememberScrollState() else null
            
            Text(
                text = result.output,
                style = JewelTheme.defaultTextStyle.copy(
                    fontFamily = FontFamily.Monospace,
                    fontSize = 11.sp,
                    color = JewelTheme.globalColors.text.normal.copy(alpha = 0.8f)
                ),
                modifier = if (scrollState != null) {
                    Modifier.verticalScroll(scrollState)
                } else {
                    Modifier
                }
            )
        }
    } else if (result is ToolResult.Failure) {
        Text(
            text = "‚ùå ${result.error}",
            style = JewelTheme.defaultTextStyle.copy(
                fontSize = 12.sp,
                color = Color(0xFFFF6B6B)
            )
        )
    }
}

/**
 * Êñá‰ª∂ÂÜÖÂÆπÈ¢ÑËßà
 */
@Composable
private fun FileContentPreview(toolCall: ToolCall) {
    // ‰ΩøÁî®ÈÄöÁî®ÁªÑ‰ª∂Ôºå‰∏çÈôêÂà∂È´òÂ∫¶
    ToolResultContent(
        toolCall = toolCall,
        limitHeight = false
    )
}

/**
 * Êñá‰ª∂ÂàóË°®Â±ïÁ§∫
 */
@Composable
private fun FileListDisplay(toolCall: ToolCall) {
    println("[FileListDisplay] ÊòæÁ§∫LSÁªìÊûú")
    
    // ‰ΩøÁî®ÈÄöÁî®ÁªÑ‰ª∂Ôºå‰∏çÈôêÂà∂È´òÂ∫¶
    ToolResultContent(
        toolCall = toolCall,
        limitHeight = false
    )
}

/**
 * ÂëΩ‰ª§ÁªìÊûúÂ±ïÁ§∫ - ‰ΩøÁî® ANSI ÁªàÁ´ØÊòæÁ§∫
 */
@Composable
private fun CommandResultDisplay(toolCall: ToolCall) {
    val result = toolCall.result ?: return
    
    // ÊâßË°åÁªìÊûú
    when (result) {
        is ToolResult.Success -> {
            val output = result.output
            
            // ËøáÊª§ÊéâÁ©∫Ë°åÔºåÂè™‰øùÁïôÊúâÂÜÖÂÆπÁöÑË°å
            val cleanedOutput = output.lines()
                .filter { it.trim().isNotEmpty() }
                .joinToString("\n")
            
            // Áõ¥Êé•‰ΩøÁî® ANSI ÁªàÁ´ØÊòæÁ§∫ËæìÂá∫ - Ëøõ‰∏ÄÊ≠•ÂáèÂ∞ëÊòæÁ§∫Ë°åÊï∞ËäÇÁúÅÁ©∫Èó¥
            AnsiOutputView(
                text = cleanedOutput,
                modifier = Modifier.fillMaxWidth(),
                maxLines = 8,  // Ëøõ‰∏ÄÊ≠•ÂáèÂ∞ëÂà∞8Ë°å
                onCopy = { copiedText ->
                    // TODO: ÂÆûÁé∞Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø
                }
            )
        }
        is ToolResult.Failure -> {
            Text(
                text = "‚ùå ${result.error}",
                style = JewelTheme.defaultTextStyle.copy(
                    fontSize = 12.sp,
                    color = Color(0xFFFF6B6B)
                )
            )
        }
        else -> {}
    }
}

/**
 * ÈªòËÆ§ÁªìÊûúÂ±ïÁ§∫
 */
@Composable
private fun DefaultResultDisplay(toolCall: ToolCall) {
    val result = toolCall.result ?: return
    
    when (result) {
        is ToolResult.Success -> {
            // ÂØπÁªìÊûúÂÜÖÂÆπËøõË°åÊô∫ËÉΩËøáÊª§ÂíåÁÆÄÂåñ
            val cleanedContent = cleanToolResultContent(result.output, toolCall.name)
            
            if (cleanedContent.isNotEmpty()) {
                // Ê†πÊçÆÂ∑•ÂÖ∑Á±ªÂûãÂÜ≥ÂÆöÊòØÂê¶ÈôêÂà∂È´òÂ∫¶
                val shouldLimitHeight = shouldLimitToolHeight(toolCall)
                
                // ÂàõÂª∫ÁÆÄÂåñÂêéÁöÑÂ∑•ÂÖ∑Ë∞ÉÁî®ÂØπË±°
                val simplifiedToolCall = toolCall.copy(
                    result = ToolResult.Success(cleanedContent)
                )
                
                ToolResultContent(
                    toolCall = simplifiedToolCall,
                    limitHeight = shouldLimitHeight,
                    maxHeight = 120.dp
                )
            } else {
                // Â¶ÇÊûúÂÜÖÂÆπË¢´ÂÆåÂÖ®ËøáÊª§ÊéâÔºåÊòæÁ§∫ÁÆÄÂçïÁöÑÊàêÂäüÁä∂ÊÄÅ
                Text(
                    text = "‚úÖ ÊâßË°åÊàêÂäü",
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 12.sp,
                        color = Color(0xFF4CAF50)
                    )
                )
            }
        }
        is ToolResult.Failure -> {
            Text(
                text = "‚ùå ${result.error}",
                style = JewelTheme.defaultTextStyle.copy(
                    fontSize = 12.sp,
                    color = Color(0xFFFF6B6B)
                )
            )
        }
        is ToolResult.FileSearchResult -> {
            Text(
                text = "üìÅ ÊâæÂà∞ ${result.files.size} ‰∏™Êñá‰ª∂ (ÊÄªËÆ° ${result.totalCount})",
                style = JewelTheme.defaultTextStyle.copy(fontSize = 12.sp)
            )
        }
        else -> {}
    }
}

/**
 * Âà§Êñ≠Â∑•ÂÖ∑ÊòØÂê¶Â∫îËØ•ÈôêÂà∂È´òÂ∫¶
 */
private fun shouldLimitToolHeight(toolCall: ToolCall): Boolean {
    // ‰ºòÂÖà‰ΩøÁî®Êñ∞ÁöÑ Tool ÂØπË±°
    return toolCall.tool?.shouldLimitHeight() ?: run {
        // ÂõûÈÄÄÂà∞ÊóßÁöÑ ToolType Á≥ªÁªü
        val toolType = ToolType.fromName(toolCall.name)
        ToolType.shouldLimitHeight(toolType)
    }
}

/**
 * Ê†ºÂºèÂåñ Tooltip ‰∏≠ÁöÑÂèÇÊï∞ÂÄºÊòæÁ§∫
 */
private fun formatTooltipValue(value: Any): String {
    return when (value) {
        is String -> {
            when {
                value.length > 200 -> value.take(197) + "..."
                else -> value
            }
        }
        is List<*> -> "[${value.size} items]"
        is Map<*, *> -> "{${value.size} entries}"
        else -> value.toString()
    }
}

/**
 * Ê∏ÖÁêÜÂ∑•ÂÖ∑ÁªìÊûúÂÜÖÂÆπÔºåËøáÊª§ÊäÄÊúØÂô™Èü≥
 */
private fun cleanToolResultContent(content: String, toolName: String): String {
    if (content.isBlank()) return ""
    
    // MCP Â∑•ÂÖ∑Áªü‰∏ÄËøáÊª§
    if (toolName.startsWith("mcp__", ignoreCase = true)) {
        return cleanMcpToolResult(content, toolName)
    }
    
    return when {
        // Êñá‰ª∂Êìç‰ΩúÂ∑•ÂÖ∑ - Âè™ÊòæÁ§∫ÂÖ≥ÈîÆ‰ø°ÊÅØ
        toolName.contains("LS", ignoreCase = true) -> cleanLsOutput(content)
        toolName.contains("Read", ignoreCase = true) -> cleanReadOutput(content)
        toolName.contains("Write", ignoreCase = true) -> cleanWriteOutput(content)
        toolName.contains("Edit", ignoreCase = true) -> cleanEditOutput(content)
        
        // Á≥ªÁªüÂ∑•ÂÖ∑ - ËøáÊª§ÈÖçÁΩÆÂíåÊäÄÊúØ‰ø°ÊÅØ
        toolName.contains("Bash", ignoreCase = true) -> cleanBashOutput(content)
        toolName.contains("info", ignoreCase = true) -> cleanInfoOutput(content)
        
        // ÂÖ∂‰ªñÂ∑•ÂÖ∑‰øùÊåÅÂéüÊúâÂÜÖÂÆπ‰ΩÜÈôêÂà∂ÈïøÂ∫¶
        else -> if (content.length > 500) content.take(497) + "..." else content
    }
}

/**
 * Ê∏ÖÁêÜ MCP Â∑•ÂÖ∑ÁªìÊûú - Â¢ûÂº∫ÁâàÔºåÊõ¥Á≤æÂáÜÁöÑÂÜÖÂÆπËøáÊª§
 */
private fun cleanMcpToolResult(content: String, toolName: String): String {
    val serverName = toolName.substringAfter("mcp__").substringBefore("__")
    val functionName = toolName.substringAfterLast("__")
    
    // ËøáÊª§Â∏∏ËßÅÁöÑ MCP ÊäÄÊúØËæìÂá∫
    return when {
        // Êï∞ÊçÆÂ∫ìÊìç‰ΩúÁªìÊûú
        serverName.contains("postgres", ignoreCase = true) -> {
            when {
                content.contains("rows affected", ignoreCase = true) -> extractRowsAffected(content)
                content.contains("SELECT", ignoreCase = true) -> {
                    val lines = content.lines().filter { it.trim().isNotEmpty() }
                    "üìä Êü•ËØ¢ÁªìÊûú (${lines.size} Ë°åÊï∞ÊçÆ)"
                }
                content.contains("error", ignoreCase = true) -> "‚ùå Êï∞ÊçÆÂ∫ìÊìç‰ΩúÂ§±Ë¥•"
                functionName.contains("list", ignoreCase = true) -> {
                    val count = content.lines().filter { it.trim().isNotEmpty() }.size
                    "üìã ÂàóÂá∫ $count È°π"
                }
                else -> "‚úÖ Êï∞ÊçÆÂ∫ìÊìç‰ΩúÊàêÂäü"
            }
        }
        
        // Redis Êìç‰ΩúÁªìÊûú
        serverName.contains("redis", ignoreCase = true) -> {
            when {
                content.contains("error", ignoreCase = true) || content.contains("fail", ignoreCase = true) -> 
                    "‚ùå Redis Êìç‰ΩúÂ§±Ë¥•"
                functionName.contains("get", ignoreCase = true) && content.length > 50 ->
                    "üì§ Ëé∑ÂèñÊï∞ÊçÆ (${content.length} Â≠óÁ¨¶)"
                functionName.contains("set", ignoreCase = true) -> "üì• Êï∞ÊçÆÂÜôÂÖ•ÊàêÂäü"
                functionName.contains("search", ignoreCase = true) -> {
                    val matches = content.lines().filter { it.trim().isNotEmpty() }.size
                    "üîç ÊêúÁ¥¢Âà∞ $matches È°πÁªìÊûú"
                }
                else -> "‚úÖ Redis Êìç‰ΩúÊàêÂäü"
            }
        }
        
        // Excel Êìç‰ΩúÁªìÊûú
        serverName.contains("excel", ignoreCase = true) -> {
            when {
                functionName.contains("read", ignoreCase = true) -> {
                    if (content.contains("rows", ignoreCase = true)) {
                        "üìä Excel Êï∞ÊçÆËØªÂèñÂÆåÊàê"
                    } else {
                        "üìä Excel Êñá‰ª∂ËØªÂèñÂÆåÊàê"
                    }
                }
                functionName.contains("write", ignoreCase = true) -> "üìù Excel Êï∞ÊçÆÂÜôÂÖ•ÂÆåÊàê"
                functionName.contains("format", ignoreCase = true) -> "üé® Excel Ê†ºÂºèËÆæÁΩÆÂÆåÊàê"
                functionName.contains("create", ignoreCase = true) -> "üìÑ Excel Êñá‰ª∂ÂàõÂª∫ÂÆåÊàê"
                else -> "‚úÖ Excel Êìç‰ΩúÂÆåÊàê"
            }
        }
        
        // XMind Êìç‰ΩúÁªìÊûú
        serverName.contains("xmind", ignoreCase = true) -> {
            when {
                functionName.contains("read", ignoreCase = true) -> "üß† ÊÄùÁª¥ÂØºÂõæËß£ÊûêÂÆåÊàê"
                functionName.contains("search", ignoreCase = true) -> "üîç ÊÄùÁª¥ÂØºÂõæÊêúÁ¥¢ÂÆåÊàê"
                functionName.contains("extract", ignoreCase = true) -> "üì§ ËäÇÁÇπÊèêÂèñÂÆåÊàê"
                else -> "‚úÖ XMind Êìç‰ΩúÂÆåÊàê"
            }
        }
        
        // Gradle Á±ªÊü•ÊâæÁªìÊûú
        serverName.contains("gradle", ignoreCase = true) -> {
            when {
                functionName.contains("find_class", ignoreCase = true) -> {
                    if (content.contains("ÊâæÂà∞", ignoreCase = true)) {
                        "üîç Á±ªÊü•ÊâæÂÆåÊàê"
                    } else {
                        "‚ùå Êú™ÊâæÂà∞ÊåáÂÆöÁ±ª"
                    }
                }
                functionName.contains("get_source", ignoreCase = true) -> "üìÑ Ê∫êÁ†ÅËé∑ÂèñÂÆåÊàê"
                else -> "‚úÖ Gradle Êìç‰ΩúÂÆåÊàê"
            }
        }
        
        // ÂÖ∂‰ªñ MCP Â∑•ÂÖ∑ÁöÑÊô∫ËÉΩÂ§ÑÁêÜ
        else -> {
            when {
                content.length > 500 -> {
                    // ÈïøÂÜÖÂÆπÔºåÊô∫ËÉΩÊèêÂèñÊëòË¶Å
                    val lines = content.lines().filter { it.trim().isNotEmpty() }
                    val dataLines = lines.filter { line ->
                        !line.contains("server", ignoreCase = true) &&
                        !line.contains("config", ignoreCase = true) &&
                        !line.contains("debug", ignoreCase = true) &&
                        line.length < 120
                    }
                    
                    if (dataLines.isNotEmpty()) {
                        "${dataLines.take(2).joinToString("\n")}\n... (${lines.size} Ë°åÊï∞ÊçÆ)"
                    } else {
                        "‚úÖ $functionName ÊâßË°åÂÆåÊàê (${lines.size} Ë°åËæìÂá∫)"
                    }
                }
                content.length > 100 -> {
                    // ‰∏≠Á≠âÈïøÂ∫¶ÂÜÖÂÆπÔºå‰øùÁïôÂÖ≥ÈîÆ‰ø°ÊÅØ
                    val lines = content.lines().filter { it.trim().isNotEmpty() }.take(3)
                    lines.joinToString("\n")
                }
                else -> content // Áü≠ÂÜÖÂÆπ‰øùÊåÅÂéüÊ†∑
            }
        }
    }
}

/**
 * Ê∏ÖÁêÜ LS ÂëΩ‰ª§ËæìÂá∫ - Â¢ûÂº∫ÁâàÔºåÊõ¥Êô∫ËÉΩÁöÑÂàÜÁ±ªÁªüËÆ°
 */
private fun cleanLsOutput(content: String): String {
    val lines = content.lines().filter { it.trim().isNotEmpty() }
    
    if (lines.size <= 8) {
        return content  // ÂÜÖÂÆπ‰∏çÂ§öÔºå‰øùÊåÅÂéüÊ†∑
    }
    
    // ÂàÜÊûêÊñá‰ª∂Á±ªÂûã
    val directories = lines.count { line ->
        line.startsWith("d") || line.endsWith("/") || 
        (!line.contains(".") && !line.contains(" "))
    }
    val files = lines.size - directories
    
    val summary = buildString {
        append("üìÅ ")
        if (directories > 0 && files > 0) {
            append("${directories} ‰∏™ÁõÆÂΩï, ${files} ‰∏™Êñá‰ª∂")
        } else if (directories > 0) {
            append("${directories} ‰∏™ÁõÆÂΩï")
        } else {
            append("${files} ‰∏™Êñá‰ª∂")
        }
    }
    
    return buildString {
        append(summary)
        append("\n")
        append(lines.take(6).joinToString("\n"))
        if (lines.size > 6) {
            append("\n... ËøòÊúâ ${lines.size - 6} È°π")
        }
    }
}

/**
 * Ê∏ÖÁêÜËØªÊñá‰ª∂ËæìÂá∫ - Â¢ûÂº∫ÁâàÔºåÊô∫ËÉΩÂÜÖÂÆπÊëòË¶Å
 */
private fun cleanReadOutput(content: String): String {
    val lines = content.lines()
    
    // Áü≠Êñá‰ª∂ÂÜÖÂÆπÔºå‰øùÊåÅÂéüÊ†∑
    if (lines.size <= 12 && content.length <= 800) {
        return content
    }
    
    // ÈïøÊñá‰ª∂ÔºåÊòæÁ§∫ÊëòË¶Å‰ø°ÊÅØ
    val nonEmptyLines = lines.filter { it.trim().isNotEmpty() }
    val fileType = when {
        lines.any { it.trim().startsWith("{") || it.trim().startsWith("[") } -> "JSON"
        lines.any { it.trim().startsWith("<") } -> "XML/HTML"
        lines.any { it.contains("function") || it.contains("class") } -> "‰ª£Á†Å"
        lines.any { it.startsWith("#") } -> "ÈÖçÁΩÆ"
        else -> "ÊñáÊú¨"
    }
    
    return buildString {
        append("üìÑ $fileType Êñá‰ª∂ÂÜÖÂÆπ (${lines.size} Ë°å, ${content.length} Â≠óÁ¨¶)")
        append("\n")
        append(lines.take(8).joinToString("\n"))
        if (lines.size > 8) {
            append("\n... ËøòÊúâ ${lines.size - 8} Ë°å")
        }
    }
}

/**
 * Ê∏ÖÁêÜÂÜôÊñá‰ª∂ËæìÂá∫
 */
private fun cleanWriteOutput(content: String): String {
    return when {
        content.contains("successfully", ignoreCase = true) -> "‚úÖ Êñá‰ª∂ÂÜôÂÖ•ÊàêÂäü"
        content.contains("created", ignoreCase = true) -> "‚úÖ Êñá‰ª∂ÂàõÂª∫ÊàêÂäü"
        content.contains("error", ignoreCase = true) -> "‚ùå Êñá‰ª∂Êìç‰ΩúÂ§±Ë¥•"
        else -> if (content.length > 100) "‚úÖ Êñá‰ª∂Êìç‰ΩúÂÆåÊàê" else content
    }
}

/**
 * Ê∏ÖÁêÜÁºñËæëÊñá‰ª∂ËæìÂá∫
 */
private fun cleanEditOutput(content: String): String {
    return when {
        content.contains("successfully", ignoreCase = true) -> "‚úÖ Êñá‰ª∂ÁºñËæëÊàêÂäü"
        content.contains("modified", ignoreCase = true) -> "‚úÖ Êñá‰ª∂‰øÆÊîπÂÆåÊàê"
        content.contains("error", ignoreCase = true) -> "‚ùå ÁºñËæëÂ§±Ë¥•"
        else -> if (content.length > 100) "‚úÖ Êñá‰ª∂ÁºñËæëÂÆåÊàê" else content
    }
}

/**
 * Ê∏ÖÁêÜ Bash ÂëΩ‰ª§ËæìÂá∫ - Â¢ûÂº∫ÁâàÔºåÊõ¥ÊøÄËøõÁöÑËøáÊª§
 */
private fun cleanBashOutput(content: String): String {
    val lines = content.lines().filter { it.trim().isNotEmpty() }
    
    // ÂØπ‰∏çÂêåÁ±ªÂûãÁöÑÂëΩ‰ª§ËæìÂá∫ÈááÁî®‰∏çÂêåÁöÑÂ§ÑÁêÜÁ≠ñÁï•
    return when {
        // Êñá‰ª∂ÂàóË°®Á±ªÂëΩ‰ª§ (ls, findÁ≠â)
        lines.any { it.contains(".") && (it.contains("/") || it.contains("\\")) } -> {
            val fileLines = lines.filter { 
                it.contains(".") && (it.contains("/") || it.contains("\\"))
            }
            if (fileLines.size > 10) {
                "üìÅ ÊâæÂà∞ ${fileLines.size} ‰∏™Êñá‰ª∂\n${fileLines.take(8).joinToString("\n")}\n... ËøòÊúâ ${fileLines.size - 8} ‰∏™Êñá‰ª∂"
            } else {
                fileLines.joinToString("\n")
            }
        }
        
        // ÁªüËÆ°‰ø°ÊÅØÁ±ªÂëΩ‰ª§
        lines.any { it.contains("total") || it.contains("count") || it.contains("=") } -> {
            lines.filter { 
                it.contains("total") || it.contains("count") || 
                it.contains("=") || it.length < 50 
            }.take(5).joinToString("\n")
        }
        
        // ÈïøËæìÂá∫ÂÜÖÂÆπÔºåÂè™‰øùÁïôÂÖ≥ÈîÆ‰ø°ÊÅØ
        lines.size > 15 -> {
            val keyLines = lines.filter { line ->
                line.length < 100 && 
                !line.startsWith("#") && 
                !line.startsWith("//") &&
                !line.trim().startsWith("*") &&
                line.trim().isNotEmpty()
            }.take(8)
            
            if (keyLines.isNotEmpty()) {
                "${keyLines.joinToString("\n")}\n... (${lines.size - keyLines.size} Ë°åÁúÅÁï•)"
            } else {
                "‚úÖ ÂëΩ‰ª§ÊâßË°åÂÆåÊàê (${lines.size} Ë°åËæìÂá∫)"
            }
        }
        
        // Áü≠ËæìÂá∫Ôºå‰øùÊåÅÂéüÊ†∑‰ΩÜÈôêÂà∂ÈïøÂ∫¶
        else -> {
            val cleanedContent = lines.joinToString("\n")
            if (cleanedContent.length > 400) {
                cleanedContent.take(397) + "..."
            } else {
                cleanedContent
            }
        }
    }
}

/**
 * Ê∏ÖÁêÜ‰ø°ÊÅØÂëΩ‰ª§ËæìÂá∫ÔºàÂ¶Ç MCP infoÔºâ
 */
private fun cleanInfoOutput(content: String): String {
    // ËøáÊª§ÊéâÂ§ßÊÆµÁöÑÈÖçÁΩÆÂíåÊúçÂä°Âô®ÂàóË°®
    val lines = content.lines().filter { line ->
        !line.contains("[") && 
        !line.contains("{") &&
        !line.contains("server", ignoreCase = true) &&
        !line.contains("config", ignoreCase = true) &&
        line.trim().isNotEmpty()
    }
    
    return if (lines.isEmpty()) {
        "‚úÖ ‰ø°ÊÅØÊü•ËØ¢ÂÆåÊàê"
    } else {
        lines.take(5).joinToString("\n")
    }
}

/**
 * ‰ªéÊï∞ÊçÆÂ∫ìËæìÂá∫‰∏≠ÊèêÂèñÂΩ±ÂìçË°åÊï∞
 */
private fun extractRowsAffected(content: String): String {
    val regex = "(\\d+)\\s+rows?\\s+affected".toRegex(RegexOption.IGNORE_CASE)
    val match = regex.find(content)
    return if (match != null) {
        "‚úÖ Êìç‰ΩúÊàêÂäüÔºåÂΩ±Âìç ${match.groupValues[1]} Ë°å"
    } else {
        "‚úÖ Êï∞ÊçÆÂ∫ìÊìç‰ΩúÂÆåÊàê"
    }
}