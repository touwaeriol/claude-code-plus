/*
 * SimpleInlineFileReferenceClean.kt
 * 
 * ÈáçÊûÑÂêéÁöÑÁÆÄÂåñÊñá‰ª∂ÂºïÁî®ÁªÑ‰ª∂ - ÁßªÈô§ÈáçÂ§ç‰ª£Á†ÅÔºå‰ΩøÁî®Áªü‰∏Ä‰∏öÂä°ÁªÑ‰ª∂
 * ÂÆåÂÖ®Âü∫‰∫éJewelÁªÑ‰ª∂ÂÆûÁé∞
 */

package com.claudecodeplus.ui.jewel.components

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.background
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.clickable
import androidx.compose.foundation.border
import androidx.compose.foundation.lazy.LazyListState
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.input.key.*
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.TextRange
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.window.PopupPositionProvider
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.IntRect
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.LayoutDirection
import com.claudecodeplus.ui.services.IndexedFileInfo
import com.claudecodeplus.ui.services.FileIndexService
import com.claudecodeplus.ui.jewel.components.business.*
import com.claudecodeplus.ui.jewel.components.createMarkdownContextLink
import org.jetbrains.jewel.foundation.theme.JewelTheme
import org.jetbrains.jewel.ui.component.Text
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

/**
 * ÁÆÄÂåñÁöÑÂÜÖËÅîÊñá‰ª∂ÂºïÁî®Â§ÑÁêÜÂô® - ‰ΩøÁî®‰∏öÂä°ÁªÑ‰ª∂Â∞ÅË£Ö
 * 
 * ‰ΩøÁî®Êñ∞ÁöÑ‰∏öÂä°ÈÄªËæëÁªÑ‰ª∂ÔºåÈÅøÂÖçUI‰∏≠ÁöÑÂ§çÊùÇÈÄªËæë
 */
@Composable
fun SimpleInlineFileReferenceHandler(
    textFieldValue: TextFieldValue,
    onTextChange: (TextFieldValue) -> Unit,
    fileIndexService: FileIndexService?,
    enabled: Boolean = true,
    textLayoutResult: androidx.compose.ui.text.TextLayoutResult? = null,
    modifier: Modifier = Modifier
) {
    // ‰ΩøÁî®‰∏öÂä°ÁªÑ‰ª∂ÁÆ°ÁêÜ‰∏ä‰∏ãÊñáÈÄâÊã©
    val contextManager = rememberContextSelectionManager(
        fileIndexService = fileIndexService,
        onContextAdd = { /* @ Á¨¶Âè∑Ê®°Âºè‰∏çÈúÄË¶ÅÊ∑ªÂä†Âà∞‰∏ä‰∏ãÊñáÂàóË°® */ },
        onTextUpdate = onTextChange
    )
    
    // ÁÆ°ÁêÜÂºπÁ™óÁä∂ÊÄÅ
    val (scrollState, eventHandler) = rememberFilePopupState()
    var selectedIndex by remember { mutableStateOf(0) }
    
    // ‰ΩøÁî®‰∏öÂä°ÁªÑ‰ª∂Ê£ÄÊµã@ Á¨¶Âè∑Êü•ËØ¢
    val selectionState = rememberContextSelectionState(
        textFieldValue = textFieldValue,
        contextManager = contextManager,
        enabled = enabled
    )
    
    // ËÆ°ÁÆóÂºπÁ™ó‰ΩçÁΩÆ
    val popupOffset = remember(textLayoutResult, selectionState.atPosition) {
        if (selectionState.atPosition != null) {
            TextPositionUtils.safeCalculateCharacterPosition(
                textLayoutResult = textLayoutResult,
                characterPosition = selectionState.atPosition,
                textLength = textFieldValue.text.length
            )
        } else {
            Offset.Zero
        }
    }
    
    // ÊòæÁ§∫@ Á¨¶Âè∑ÂºπÁ™ó
    if (selectionState.isAtSymbolActive && selectionState.searchResults.isNotEmpty()) {
        SimpleFilePopup(
            results = selectionState.searchResults,
            selectedIndex = selectedIndex,
            searchQuery = selectionState.searchQuery,
            scrollState = scrollState,
            popupOffset = popupOffset,
            onItemSelected = { file ->
                if (selectionState.atPosition != null) {
                    contextManager.handleAtSymbolFileSelection(
                        file = file,
                        currentText = textFieldValue,
                        atPosition = selectionState.atPosition
                    )
                    selectedIndex = 0 // ÈáçÁΩÆÈÄâÊã©Á¥¢Âºï
                }
            },
            onDismiss = { 
                selectedIndex = 0
            },
            onKeyEvent = { keyEvent ->
                eventHandler.handleKeyEvent(
                    keyEvent = keyEvent,
                    selectedIndex = selectedIndex,
                    resultsSize = selectionState.searchResults.size,
                    onIndexChange = { selectedIndex = it },
                    onItemSelect = {
                        if (selectedIndex in selectionState.searchResults.indices && selectionState.atPosition != null) {
                            val selectedFile = selectionState.searchResults[selectedIndex]
                            contextManager.handleAtSymbolFileSelection(
                                file = selectedFile,
                                currentText = textFieldValue,
                                atPosition = selectionState.atPosition
                            )
                            selectedIndex = 0
                        }
                    },
                    onDismiss = { 
                        selectedIndex = 0
                    }
                )
            }
        )
    }
}

/**
 * @ Á¨¶Âè∑‰∏ìÁî®Êñá‰ª∂ÂºπÁ™ó - ‰ΩøÁî®Áªü‰∏Ä‰∏öÂä°ÁªÑ‰ª∂
 */
@Composable
fun SimpleFilePopup(
    results: List<IndexedFileInfo>,
    selectedIndex: Int,
    searchQuery: String,
    scrollState: LazyListState,
    popupOffset: Offset,
    onItemSelected: (IndexedFileInfo) -> Unit,
    onDismiss: () -> Unit,
    onKeyEvent: (KeyEvent) -> Boolean,
    modifier: Modifier = Modifier,
    onPopupBoundsChanged: ((androidx.compose.ui.geometry.Rect) -> Unit)? = null
) {
    val config = FilePopupConfig(
        type = FilePopupType.AT_SYMBOL,
        anchorOffset = popupOffset
    )
    
    UnifiedFilePopup(
        results = results,
        selectedIndex = selectedIndex,
        searchQuery = searchQuery,
        scrollState = scrollState,
        config = config,
        onItemSelected = onItemSelected,
        onDismiss = onDismiss,
        onKeyEvent = onKeyEvent,
        modifier = modifier,
        onPopupBoundsChanged = onPopupBoundsChanged
    )
}

/**
 * Add Context ÊåâÈíÆ‰∏ìÁî®Êñá‰ª∂ÂºπÁ™ó - ‰ΩøÁî®Áªü‰∏Ä‰∏öÂä°ÁªÑ‰ª∂
 */
@Composable
fun ButtonFilePopup(
    results: List<IndexedFileInfo>,
    selectedIndex: Int,
    searchQuery: String,
    scrollState: LazyListState,
    popupOffset: Offset,
    onItemSelected: (IndexedFileInfo) -> Unit,
    onDismiss: () -> Unit,
    onKeyEvent: (KeyEvent) -> Boolean,
    modifier: Modifier = Modifier,
    onPopupBoundsChanged: ((androidx.compose.ui.geometry.Rect) -> Unit)? = null
) {
    val config = FilePopupConfig(
        type = FilePopupType.ADD_CONTEXT,
        anchorOffset = popupOffset
    )
    
    UnifiedFilePopup(
        results = results,
        selectedIndex = selectedIndex,
        searchQuery = searchQuery,
        scrollState = scrollState,
        config = config,
        onItemSelected = onItemSelected,
        onDismiss = onDismiss,
        onKeyEvent = onKeyEvent,
        modifier = modifier,
        onPopupBoundsChanged = onPopupBoundsChanged
    )
}

/**
 * Jewel È£éÊ†ºÁöÑÊñá‰ª∂È°πÁªÑ‰ª∂ - ÊîØÊåÅ‰∫åÁ∫ßÊÇ¨ÊµÆ
 */
@Composable
fun JewelFileItem(
    file: IndexedFileInfo,
    isSelected: Boolean,
    searchQuery: String,
    onClick: () -> Unit,
    modifier: Modifier = Modifier,
    anchorBounds: androidx.compose.ui.geometry.Rect? = null
) {
    // ÊÇ¨ÂÅúÁä∂ÊÄÅÁÆ°ÁêÜ
    var isHovered by remember { mutableStateOf(false) }
    
    // ‰ΩøÁî®BoxÊîØÊåÅÂµåÂ•óÁöÑ‰∫åÁ∫ßÊÇ¨ÊµÆ
    Box(modifier = modifier.fillMaxWidth()) {
        // ‰∏ªÊñá‰ª∂È°π
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(4.dp))
                .background(
                    color = when {
                        isSelected -> JewelTheme.globalColors.borders.focused.copy(alpha = 0.25f)
                        isHovered -> JewelTheme.globalColors.borders.normal.copy(alpha = 0.08f)
                        else -> androidx.compose.ui.graphics.Color.Transparent
                    }
                )
                .then(
                    if (isSelected) {
                        Modifier.border(
                            1.dp,
                            JewelTheme.globalColors.borders.focused.copy(alpha = 0.6f),
                            RoundedCornerShape(4.dp)
                        )
                    } else {
                        Modifier
                    }
                )
                .clickable { onClick() }
                .padding(horizontal = 8.dp, vertical = 4.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(6.dp)
        ) {
            // Êñá‰ª∂ÂõæÊ†á
            Text(
                text = if (file.isDirectory) "üìÅ" else getFileIcon(file.name),
                style = JewelTheme.defaultTextStyle.copy(fontSize = 12.sp)
            )
            
            // Êñá‰ª∂‰ø°ÊÅØ
            Row(
                modifier = Modifier.weight(1f),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(6.dp)
            ) {
                // ‰∏ªÊñá‰ª∂ÂêçÔºàÊêúÁ¥¢È´ò‰∫ÆÔºâ
                val highlightedFileName = if (searchQuery.isNotEmpty()) {
                    buildAnnotatedString {
                        val fileName = file.name
                        val queryIndex = fileName.indexOf(searchQuery, ignoreCase = true)
                        if (queryIndex >= 0) {
                            append(fileName.substring(0, queryIndex))
                            withStyle(
                                SpanStyle(
                                    background = JewelTheme.globalColors.borders.focused.copy(alpha = 0.3f),
                                    color = JewelTheme.globalColors.borders.focused
                                )
                            ) {
                                append(fileName.substring(queryIndex, queryIndex + searchQuery.length))
                            }
                            append(fileName.substring(queryIndex + searchQuery.length))
                        } else {
                            append(fileName)
                        }
                    }
                } else {
                    buildAnnotatedString { append(file.name) }
                }
                
                Text(
                    text = highlightedFileName,
                    style = JewelTheme.defaultTextStyle.copy(
                        fontSize = 13.sp,
                        color = if (isSelected) 
                            JewelTheme.globalColors.borders.focused
                        else 
                            JewelTheme.globalColors.text.normal
                    ),
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis,
                    modifier = Modifier.weight(1f, fill = false)
                )
                
                // Ë∑ØÂæÑÊòæÁ§∫ÔºàÁ≤æÁÆÄÁâàÔºâ
                if (file.relativePath.isNotEmpty()) {
                    val displayPath = file.relativePath.removeSuffix("/${file.name}").removeSuffix(file.name)
                    if (displayPath.isNotEmpty()) {
                        Text(
                            text = "‚Ä¢ ${displayPath.split("/").takeLast(2).joinToString("/")}",
                            style = JewelTheme.defaultTextStyle.copy(
                                fontSize = 10.sp,
                                color = JewelTheme.globalColors.text.disabled
                            ),
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis,
                            modifier = Modifier.weight(1f, fill = false)
                        )
                    }
                }
            }
        }
        
        // ‰∫åÁ∫ßÂ±ÇÁ∫ßÊÇ¨ÊµÆÂºπÁ™ó
        if (isHovered && isSelected && anchorBounds != null) {
            FileHierarchyPopup(
                targetFile = file,
                onDismiss = { isHovered = false },
                anchorBounds = anchorBounds
            )
        }
    }
}

/**
 * Ëé∑ÂèñÊñá‰ª∂ÂõæÊ†á
 */
private fun getFileIcon(fileName: String): String {
    return when (fileName.substringAfterLast('.', "")) {
        "kt" -> "üü¢"
        "java" -> "‚òï"
        "js", "ts", "tsx", "jsx" -> "üü®"
        "py" -> "üêç"
        "md" -> "üìù"
        "json" -> "üìã"
        "xml", "html", "htm" -> "üìÑ"
        "gradle", "kts" -> "üêò"
        "properties", "yml", "yaml" -> "‚öôÔ∏è"
        "css", "scss", "sass" -> "üé®"
        "png", "jpg", "jpeg", "gif", "svg" -> "üñºÔ∏è"
        "pdf" -> "üìï"
        "txt" -> "üìÑ"
        "sh", "bat", "cmd" -> "‚ö°"
        else -> "üìÑ"
    }
}

// ÂÖºÂÆπÊÄßÂáΩÊï∞ - ‰øùÊåÅAPI‰∏ÄËá¥ÊÄß
fun isInAtQuery(text: String, cursorPosition: Int): Pair<Int, String>? {
    if (cursorPosition <= 0 || cursorPosition > text.length) return null
    
    // ÂêëÂâçÊü•ÊâæÊúÄËøëÁöÑ@Á¨¶Âè∑
    var atPosition = -1
    for (i in cursorPosition - 1 downTo 0) {
        when (text[i]) {
            '@' -> {
                atPosition = i
                break
            }
            ' ', '\n', '\t' -> break // ÈÅáÂà∞Á©∫ÁôΩÂ≠óÁ¨¶ÂÅúÊ≠¢ÊêúÁ¥¢
        }
    }
    
    if (atPosition == -1) return null
    
    // ÂêëÂâçÊü•ÊâæÁ©∫ÁôΩÂ≠óÁ¨¶ÊàñÂºÄÂßã‰ΩçÁΩÆ
    val queryStart = atPosition + 1
    val queryEnd = run {
        for (i in cursorPosition until text.length) {
            if (text[i] in " \n\t") return@run i
        }
        text.length
    }
    
    val query = text.substring(queryStart, queryEnd)
    return if (queryEnd >= cursorPosition) {
        Pair(atPosition, query)
    } else {
        null
    }
}

/**
 * @deprecated ‰ΩøÁî® TextPositionUtils.calculateAbsoluteCharacterPosition Êõø‰ª£
 */
fun calculatePrecisePopupOffset(
    textFieldCoordinates: androidx.compose.ui.layout.LayoutCoordinates,
    textLayoutResult: androidx.compose.ui.text.TextLayoutResult?,
    atPosition: Int,
    density: androidx.compose.ui.unit.Density
): Offset {
    return TextPositionUtils.calculateAbsoluteCharacterPosition(
        textLayoutResult = textLayoutResult,
        characterPosition = atPosition,
        inputFieldCoordinates = textFieldCoordinates,
        density = density
    )
}

/**
 * @deprecated ‰ΩøÁî® TextPositionUtils.calculateCharacterPosition Êõø‰ª£
 */
fun calculatePopupOffset(
    textFieldCoordinates: androidx.compose.ui.layout.LayoutCoordinates,
    textFieldValue: TextFieldValue,
    atPosition: Int,
    density: androidx.compose.ui.unit.Density
): Offset {
    return TextPositionUtils.calculateCharacterPosition(null, atPosition)
}